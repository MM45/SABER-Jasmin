/*** pack_unpack_regular_BS2POLVECp.jahh: File containing the Jasmin implementation of the BS2POLVECp function from pack_unpack.c, with (regular) SABER parameters ***/

#ifndef BS2POLVECP_HH
#define BS2POLVECP_HH

#include "SABER_params.jahh"

fn BS2POLVECp(reg ptr u8[SABER_POLYVECCOMPRESSEDBYTES] bytes, reg ptr u16[SABER_KN] data) -> reg ptr u16[SABER_KN]
{
	inline int i;
	inline int j;

	reg u16 b1;
	reg u16 b2;

	for i = 0 to SABER_K {
		for j = 0 to (SABER_N / 4) {
			// data[i][offset_data + 0]= ( bytes[ offset_byte + 0 ] & (0xff)) |  ((bytes[ offset_byte + 1 ] & 0x03)<<8);
			b1 = (16u) bytes[i * (SABER_N * 10) / 8 + 5 * j];
			b2 = (16u) bytes[i * (SABER_N * 10) / 8 + 5 * j + 1];
			b1 &= 0xff;
			b2 &= 0x03;
			b2 <<= 8;
			b1 |= b2;
			data[i * SABER_N + 4 * j] = b1;
			
			// data[i][offset_data + 1]= ( (bytes[ offset_byte + 1 ]>>2) & (0x3f)) |  ((bytes[ offset_byte + 2 ] & 0x0f)<<6);		
			b1 = (16u) bytes[i * (SABER_N * 10) / 8 + 5 * j + 1];
			b2 = (16u) bytes[i * (SABER_N * 10) / 8 + 5 * j + 2];
			b1 >>= 2;
			b1 &= 0x3f;
			b2 &= 0x0f;
			b2 <<= 6;
			b1 |= b2;
			data[i * SABER_N + 4 * j + 1] = b1;

			// data[i][offset_data + 2]= ( (bytes[ offset_byte + 2 ]>>4) & (0x0f)) |  ((bytes[ offset_byte + 3 ] & 0x3f)<<4);
			b1 = (16u) bytes[i * (SABER_N * 10) / 8 + 5 * j + 2];
			b2 = (16u) bytes[i * (SABER_N * 10) / 8 + 5 * j + 3];
			b1 >>= 4;
			b1 &= 0x0f;
			b2 &= 0x3f;
			b2 <<= 4;
			b1 |= b2;
			data[i * SABER_N + 4 * j + 2] = b1;

			// data[i][offset_data + 3]= ( (bytes[ offset_byte + 3 ]>>6) & (0x03)) |  ((bytes[ offset_byte + 4 ] & 0xff)<<2);
			b1 = (16u) bytes[i * (SABER_N * 10) / 8 + 5 * j + 3];
			b2 = (16u) bytes[i * (SABER_N * 10) / 8 + 5 * j + 4];
			b1 >>= 6;
			b1 &= 0x03;
			b2 &= 0xff;
			b2 <<= 2;
			b1 |= b2;
			data[i * SABER_N + 4 * j + 3] = b1;
		}
	}

	return data;
}

#endif