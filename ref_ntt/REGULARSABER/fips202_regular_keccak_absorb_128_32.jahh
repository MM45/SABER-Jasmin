/*** fips202_regular_keccak_absorb_128_32.jahh: File containing the Jasmin implementation of keccak_absorb function from fips202.c, where rate == SHAKE128_RATE, mlen == 32 and with (regular) SABER parameters ***/

#ifndef KECCAK_ABSORB_128_32_HH
#define KECCAK_ABSORB_128_32_HH

#include "SABER_params.jahh"
#include "fips202_regular_load64.jahh"

fn keccak_absorb_128_32(reg ptr u64[25] s, reg ptr u8[32] m) -> reg ptr u64[25]
{
	inline int i;

	reg u8 t8;

	reg u64 t64;

	stack u8[200] t;

	/** No initial loop as mlen < rate **/

	for i = 0 to SHAKE128_RATE {
		t[i] = 0;
	}

	for i = 0 to 32 {
		t8 = m[i];
		t[i] = t8;
	}

	t[32] = 0x1F;
	t[SHAKE128_RATE - 1] |= 128;

	for i = 0 to (SHAKE128_RATE / 8) {
		t64 = load64(t[8 * i:8]);
		s[i] ^= t64;
	}

	return s;
}

#endif