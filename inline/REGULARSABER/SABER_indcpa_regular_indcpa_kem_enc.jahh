/*** SABER_indcpa_regular_indcpa_kem_enc.jahh: File containing the Jasmin implementation of the indcpa_kem_enc function from SABER_indcpa.c, with (regular) SABER parameters ***/

#ifndef INDCPA_KEM_ENC_HH
#define INDCPA_KEM_ENC_HH

#include "SABER_params.jahh"
#include "SABER_indcpa_regular_GenMatrix.jahh"
#include "poly_regular_GenSecret.jahh"
#include "pack_unpack_regular_POLVECp2BS.jahh"
#include "pack_unpack_regular_BS2POLVECp.jahh"
#include "pack_unpack_regular_SABER_pack_4bit.jahh"
#include "SABER_indcpa_regular_MatrixVectorMul.jahh"
#include "SABER_indcpa_regular_InnerProd.jahh"


inline fn indcpa_kem_enc(stack u8[SABER_KEYBYTES] message_received, stack u8[32] noiseseed, stack u8[SABER_INDCPA_PUBLICKEYBYTES] pk, stack u8[SABER_BYTES_CCA_DEC] ciphertext) -> stack u8[SABER_BYTES_CCA_DEC]
{
	inline int i;
	inline int j;
	inline int k;

	reg u8 t8;
	
	reg u16 t16;

	stack u8[SABER_SEEDBYTES] seed;
	stack u8[SABER_SCALEBYTES_KEM] msk_c;
	stack u8[SABER_POLYVECCOMPRESSEDBYTES] tcipher;
	stack u8[SABER_POLYVECCOMPRESSEDBYTES] tpk;

	stack u16[SABER_KKN] a;
	stack u16[SABER_KN] pkcl;
	stack u16[SABER_KN] skpv1;
	stack u16[SABER_KEYBYTES * 8] message;
	stack u16[SABER_KN] res;
	stack u16[SABER_N] vprime;


	for i = 0 to SABER_SEEDBYTES {
		t8 = pk[SABER_POLYVECCOMPRESSEDBYTES + i];
		seed[i] = t8;
	}

	a = GenMatrix(a, seed);

	skpv1 = GenSecret(skpv1, noiseseed);

	for i = 0 to SABER_K {
		for j = 0 to SABER_N {
			res[i * SABER_N + j] = 0;
		}
	}

	res = MatrixVectorMul(a, skpv1, res, 0);

	for i = 0 to SABER_K {
		for j = 0 to SABER_N {
			res[i * SABER_N + j] += h1;
			res[i * SABER_N + j] &= (SABER_Q - 1);
			res[i * SABER_N + j] >>= (SABER_EQ - SABER_EP);
		}
	}

	tcipher = POLVECp2BS(tcipher, res);

	// copy values of tcipher to ciphertext
	for i = 0 to SABER_POLYVECCOMPRESSEDBYTES {
		t8 = tcipher[i];
		ciphertext[i] = t8;
	}

	// copy values of pk to tpk
	for i = 0 to SABER_POLYVECCOMPRESSEDBYTES {
		t8 = pk[i];
		tpk[i] = t8;
	}

	pkcl = BS2POLVECp(tpk, pkcl);

	for i = 0 to SABER_N {
		vprime[i] = 0;
	}

	for i = 0 to SABER_K {
		for j = 0 to SABER_N {
			skpv1[i * SABER_N + j] &= (SABER_P - 1);
		}
	}

	vprime = InnerProd(pkcl, skpv1, vprime);

	for i = 0 to SABER_N {
		vprime[i] += h1;
	}

	for j = 0 to SABER_KEYBYTES {
		for i = 0 to 8 {
			// message[8*j+i] = ((message_received[j]>>i) & 0x01);
			t16 = (16u) message_received[j];
			t16 >>= i;
			t16 &= 0x01;
			message[8 * j + i] = t16;
		}
	}

	for i = 0 to SABER_N {
		// message[i] = (message[i]<<(SABER_EP-1));
		message[i] <<= (SABER_EP - 1);
	}

	for k = 0 to SABER_N {
		// vprime[k]=( (vprime[k] - message[k]) & (mod_p) )>>(SABER_EP-SABER_ET);
		t16 = vprime[k];
		t16 -= message[k];
		t16 &= (SABER_P - 1);
		t16 >>= (SABER_EP-SABER_ET);
		vprime[k] = t16;
	}

	msk_c = SABER_pack_4bit(msk_c, vprime);

	for j = 0 to SABER_SCALEBYTES_KEM {
		t8 = msk_c[j];
		ciphertext[SABER_POLYVECCOMPRESSEDBYTES + j] = t8;
	}

	return ciphertext;
}

#endif