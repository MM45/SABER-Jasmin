/*** SABER_indcpa_regular_indcpa_kem_keypair_randominc.jahh: File containing the Jasmin implementation of the indcpa_kem_keypair_randominc function from SABER_indcpa.c, with (regular) SABER parameters ***/

#ifndef INDCPA_KEM_KEYPAIR_RANDOMINC_HH
#define INDCPA_KEM_KEYPAIR_RANDOMINC_HH

#include "SABER_params.jahh"
#include "fips202_regular_shake128_32_32.jahh"
#include "SABER_indcpa_regular_GenMatrix.jahh"
#include "SABER_indcpa_regular_MatrixVectorMul.jahh"
#include "poly_regular_GenSecret.jahh"
#include "pack_unpack_regular_POLVECq2BS.jahh"
#include "pack_unpack_regular_POLVECp2BS.jahh"

inline fn indcpa_kem_keypair_randominc(stack u8[SABER_INDCPA_PUBLICKEYBYTES] pk, stack u8[SABER_INDCPA_SECRETKEYBYTES] sk, stack u8[SABER_SEEDBYTES] seed, stack u8[SABER_COINBYTES] noiseseed) -> stack u8[SABER_INDCPA_PUBLICKEYBYTES], stack u8[SABER_INDCPA_SECRETKEYBYTES]
{
	inline int i;
	inline int j;

	reg u8 t8;

	stack u8[SABER_POLYVECCOMPRESSEDBYTES] tpk;

	stack u16[SABER_KKN] a;
	stack u16[SABER_KN] skpv;
	stack u16[SABER_KN] res;


	seed = shake128_32_32(seed, seed);

	a = GenMatrix(a, seed);

	skpv = GenSecret(skpv, noiseseed);

	for i = 0 to SABER_K {
		for j = 0 to SABER_N {
			res[i * SABER_N + j] = 0;
		}
	}

	res = MatrixVectorMul(a, skpv, res, 1);

	for i = 0 to SABER_K {
		for j = 0 to SABER_N {
			res[i * SABER_N + j] += h1;
			res[i * SABER_N + j] &= (SABER_Q - 1);
			res[i * SABER_N + j] >>= (SABER_EQ - SABER_EP);
		}
	}

	sk = POLVECq2BS(sk, skpv);

	tpk = POLVECp2BS(tpk, res);

	// copy values of tpk to pk
	for i = 0 to SABER_POLYVECCOMPRESSEDBYTES {
		t8 = tpk[i];
		pk[i] = t8;
	}

	for i = 0 to SABER_SEEDBYTES {
		t8 = seed[i];
		pk[SABER_POLYVECCOMPRESSEDBYTES + i] = t8;
	}

	return pk, sk;
}

#endif