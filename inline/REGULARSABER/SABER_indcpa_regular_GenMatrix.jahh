/*** SABER_indcpa_regular_GenMatrix.jahh: File containing the Jasmin implementation of the GenMatrix function from SABER_indcpa.c, with (regular) SABER parameters ***/

#ifndef GENMATRIX_HH
#define GENMATRIX_HH

#include "SABER_params.jahh"
#include "fips202_regular_shake128_KK13N8_32.jahh"
#include "pack_unpack_regular_BS2POL.jahh"

inline fn GenMatrix(stack u16[SABER_KKN] a, stack u8[SABER_SEEDBYTES] seed) -> stack u16[SABER_KKN]
{
	inline int i;
	inline int j;
	inline int one_vector;

	reg u8 t8;

	reg u16 t16;

	reg u64 k;
	reg u64 p;

	stack u8[KK13N8] buf;
	stack u8[SABER_POLYBYTES] tbuf;

	stack u16[SABER_N] temp_ar;

	one_vector = 13 * SABER_N / 8;

	buf = shake128_KK13N8_32(buf, seed);

	for i = 0 to SABER_K {
		for j = 0 to SABER_K {
			// fill tbuf to pass to BS2POL
			p = (i * SABER_K + j) * one_vector;
			k = 0;
			while (k < SABER_POLYBYTES) {
				t8 = buf[(int) p];
				tbuf[(int) k] = t8;

				p += 1;
				k += 1;
			}

			temp_ar = BS2POL(tbuf, temp_ar);

			p = i * SABER_KN + j * SABER_N;
			k = 0;
			while (k < SABER_N) {
				t16 = temp_ar[(int) k];
				t16 &= (SABER_Q - 1);
				a[(int) p] = t16;

				p += 1;
				k += 1;
			}
		}
	}

	return a;
}

#endif