/*** kem_regular_crypto_kem_enc_randominc.jahh: File containing the Jasmin implementation of the crypto_kem_enc_randominc function from kem.c, with (regular) SABER parameters ***/

#ifndef CRYPTO_KEM_ENC_RANDOMINC_HH
#define CRYPTO_KEM_ENC_RANDOMINC_HH

#include "SABER_params.jahh"
#include "fips202_regular_sha3_256_32.jahh"
#include "fips202_regular_sha3_256_64.jahh"
#include "fips202_regular_sha3_256_PUBKEYBYTES.jahh"
#include "fips202_regular_sha3_256_CCADEC.jahh"
#include "fips202_regular_sha3_512_64.jahh"
#include "SABER_indcpa_regular_indcpa_kem_enc.jahh"

inline fn crypto_kem_enc_randominc(stack u8[SABER_BYTES_CCA_DEC] c, stack u8[SABER_HASHBYTES] k, stack u8[SABER_INDCPA_PUBLICKEYBYTES] pk, stack u8[32] random_bytes_crypto) -> stack u8[SABER_BYTES_CCA_DEC], stack u8[SABER_HASHBYTES]
{
	inline int i;

	reg u8 t8;

	stack u8[64] kr;
	stack u8[64] buf;
	stack u8[32] tbuf;
	stack u8[32] tkr;


	for i = 0 to 32 {
		t8 = random_bytes_crypto[i];
		buf[i] = t8;
	}

	// copy values from buf to tbuf for sha3 call
	for i = 0 to 32 {
		t8 = buf[i];
		tbuf[i] = t8;
	}

	tbuf = sha3_256_32(tbuf, tbuf);

	// copy result back to buf
	for i = 0 to 32 {
		t8 = tbuf[i];
		buf[i] = t8;
	}

	tbuf = sha3_256_PUBKEYBYTES(tbuf, pk);

	// copy result to buf
	for i = 0 to 32 {
		t8 = tbuf[i];
		buf[32 + i] = t8;
	}
	
	kr = sha3_512_64(kr, buf);

	// copy values from buf to tbuf for call to indcpa
	for i = 0 to 32 {
		t8 = buf[i];
		tbuf[i] = t8;
	}

	// copy values from kr to tkr for call to indcpa
	for i = 0 to 32 {
		t8 = kr[32 + i];
		tkr[i] = t8;
	}

	c = indcpa_kem_enc(tbuf, tkr, pk, c);

	tkr = sha3_256_CCADEC(tkr, c);

	// copy result to kr
	for i = 0 to 32 {
		t8 = tkr[i];
		kr[32 + i] = t8;
	}

	k = sha3_256_64(k, kr);

	return c, k;
}

#endif