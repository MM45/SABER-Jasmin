/*** SABER_indcpa_regular_indcpa_kem_dec.jahh: File containing the Jasmin implementation of the indcpa_kem_dec function from SABER_indcpa.c, with (regular) SABER parameters ***/

#ifndef INDCPA_KEM_DEC_HH
#define INDCPA_KEM_DEC_HH

#include "SABER_params.jahh"
#include "pack_unpack_regular_BS2POLVECp.jahh"
#include "pack_unpack_regular_BS2POLVECq.jahh"
#include "pack_unpack_regular_SABER_un_pack4bit.jahh"
#include "SABER_indcpa_regular_InnerProd.jahh"
#include "SABER_indcpa_regular_POL2MSG.jahh"


inline fn indcpa_kem_dec(stack u8[SABER_INDCPA_SECRETKEYBYTES] sk, stack u8[SABER_BYTES_CCA_DEC] ciphertext, stack u8[SABER_KEYBYTES] message_dec) -> stack u8[SABER_KEYBYTES]
{
	inline int i;
	inline int j;

	reg u8 t8;

	reg u16 t16;

	stack u8[SABER_POLYVECBYTES] tsk;
	stack u8[SABER_POLYVECCOMPRESSEDBYTES] tciphertext;
	stack u8[SABER_SCALEBYTES_KEM] scale_ar;

	stack u16[SABER_KN] sksv;
	stack u16[SABER_KN] pksv;
	stack u16[SABER_N] v;	
	stack u16[SABER_N] op;

	
	// copy values from sk to tsk for call to BS2POLVECq
	for i = 0 to SABER_POLYVECBYTES {
		t8 = sk[i];
		tsk[i] = t8;
	}

	// copy values from ciphertext to tciphertext for call to BS2POLVECq
	for i = 0 to SABER_POLYVECCOMPRESSEDBYTES {
		t8 = ciphertext[i];
		tciphertext[i] = t8;
	}

	sksv = BS2POLVECq(tsk, sksv);

	pksv = BS2POLVECp(tciphertext, pksv);

	for i = 0 to SABER_N {
		v[i] = 0;
	}

	for i = 0 to SABER_K {
		for j = 0 to SABER_N {
			sksv[i * SABER_N + j] &= (SABER_P - 1);
		}
	}

	v = InnerProd(pksv, sksv, v);

	for i = 0 to SABER_SCALEBYTES_KEM {
		t8 = ciphertext[SABER_POLYVECCOMPRESSEDBYTES + i];
		scale_ar[i] = t8;
	}

	op = SABER_un_pack4bit(scale_ar, op);

	for i = 0 to SABER_N {
		// v[i]= ( ( v[i] + h2 - (op[i]<<(SABER_EP-SABER_ET)) ) & (mod_p) ) >> (SABER_EP-1);
		t16 = op[i];
		t16 <<= (SABER_EP-SABER_ET);
		v[i] += h2;
		v[i] -= t16;
		v[i] &= (SABER_P - 1);
		v[i] >>= (SABER_EP - 1);
	}

	message_dec = POL2MSG(v, message_dec);

	return message_dec;
}

#endif