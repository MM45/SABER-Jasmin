








param int CRYPTO_SECRETKEYBYTES = 2304;
param int CRYPTO_PUBLICKEYBYTES = (3 * 320 + 32);
param int CRYPTO_BYTES = 32;
param int CRYPTO_CIPHERTEXTBYTES = 1088;
param int Saber_type = 2;

param int SABER_K = 3;
param int SABER_MU = 8;
param int SABER_ET = 4;

param int SABER_EQ = 13;
param int SABER_EP = 10;

param int SABER_N = 256;
param int SABER_Q = 8192;
param int SABER_P = 1024;

param int SABER_SEEDBYTES = 32;
param int SABER_NOISESEEDBYTES = 32;
param int SABER_COINBYTES = 32;
param int SABER_KEYBYTES = 32;

param int SABER_HASHBYTES = 32;

param int SABER_POLYBYTES = 416;

param int SABER_POLYVECBYTES = (SABER_K * SABER_POLYBYTES);

param int SABER_POLYVECCOMPRESSEDBYTES = (SABER_K * 320);

param int SABER_CIPHERTEXTBYTES = (SABER_POLYVECCOMPRESSEDBYTES);



param int SABER_SCALEBYTES_KEM = (SABER_ET * SABER_N / 8);

param int SABER_INDCPA_PUBLICKEYBYTES = (SABER_POLYVECCOMPRESSEDBYTES + SABER_SEEDBYTES);
param int SABER_INDCPA_SECRETKEYBYTES = (SABER_POLYVECBYTES);

param int SABER_PUBLICKEYBYTES = (SABER_INDCPA_PUBLICKEYBYTES);

param int SABER_SECRETKEYBYTES = (SABER_INDCPA_SECRETKEYBYTES + SABER_INDCPA_PUBLICKEYBYTES + SABER_HASHBYTES + SABER_KEYBYTES);

param int SABER_BYTES_CCA_DEC = (SABER_POLYVECCOMPRESSEDBYTES + SABER_SCALEBYTES_KEM);



param int SABER_KN = (SABER_K * SABER_N);
param int SABER_KKN = (SABER_K * SABER_K * SABER_N);
param int N_SB = (SABER_N / 4);
param int N_SB_RES = (2 * N_SB - 1);

param int SHAKE128_RATE = 168;
param int SHAKE256_RATE = 136;
param int SHA3_256_RATE = 136;
param int SHA3_512_RATE = 72;

param int KK13N8 = (SABER_K * SABER_K * (13 * SABER_N / 8));
param int MUNK8 = (SABER_MU * SABER_N * SABER_K / 8);

param int h1 = 4;
param int h2 = 228;





























inline fn load64(stack u8[8] x) -> reg u64
{
 inline int i;

 reg u64 r;
 reg u64 t;

 r = (64u) x[0];

 for i = 1 to 8 {
  t = (64u) x[i];
  t <<= (8 * i);
  r |= t;
 }

 return r;
}





inline fn index(inline int x, inline int y) -> inline int {
  inline int r;
  r = (x % 5) + 5 * (y % 5);
  return r;
}


inline fn ROL64(reg u64 x, inline int c) -> reg u64 {
  reg u64 y;
  _, _, y = #ROL_64(x, c);
  return y;
}

inline fn theta(stack u64[25] a) -> stack u64[25] {
  inline int x, y;
  reg u64[5] c, d;

  for x = 0 to 5 {
    c[x] = 0;
    for y = 0 to 5 {
      c[x] ^= a[x + 5 * y];
    }
  }

  for x = 0 to 5 {







    d[x] = c[(x + 1) % 5];
    _, _, d[x] = #ROL_64(d[x], 1);
    d[x] ^= c[(x + 4) % 5];
  }

  for x = 0 to 5 {
    for y = 0 to 5 {
      a[x + 5 * y] ^= d[x];
    }
  }

  return a;
}


inline fn keccakRhoOffsets(inline int i) -> inline int {
  inline int r, x, y, z, t;

  r = 0;
  x = 1;
  y = 0;
  for t = 0 to 24 {
    if (i == x + 5 * y) {
      r = ((t + 1) * (t + 2) / 2) % 64;
    }
    z = (2 * x + 3 * y) % 5;
    x = y;
    y = z;
  }

  return r;
}


inline fn rho(stack u64[25] a) -> stack u64[25] {
  inline int x, y, i, z;

  for x = 0 to 5 {
    for y = 0 to 5 {
      i = index(x, y);
      z = keccakRhoOffsets(i);
      _, _, a[i] = #ROL_64(a[i], z);
    }
  }

  return a;
}


inline fn pi(stack u64[25] a) -> stack u64[25] {
  stack u64[25] b;
  reg u64 t;
  inline int x, y, i;
  for i = 0 to 25 { t = a[i]; b[i] = t; }

  for x = 0 to 5 {
    for y = 0 to 5 {
      t = b[x + 5 * y];
      i = index(y, 2 * x + 3 * y);
      a[i] = t;
    }
  }
  return a;
}


inline fn chi(stack u64[25] a) -> stack u64[25] {
  inline int x, y, i;
  reg u64[5] c;
  for y = 0 to 5 {
    for x = 0 to 5 {
      i = index(x + 1, y);
      c[x] = a[i];
      c[x] = !c[x];
      i = index(x + 2, y);
      c[x] &= a[i];
      i = index(x, y);
      c[x] ^= a[i];
    }
    for x = 0 to 5 {
      a[x + 5 * y] = c[x];
    }
  }
  return a;
}


inline fn iota(stack u64[25] a, reg u64 c) -> stack u64[25] {
  a[0] ^= c;
  return a;
}


inline fn keccakP1600_round(stack u64[25] state, reg u64 c) -> stack u64[25] {
  state = theta(state);
  state = rho(state);
  state = pi(state);
  state = chi(state);
  state = iota(state, c);
  return state;
}

u64[24] KeccakF_RoundConstants = {0x0000000000000001, 0x0000000000008082, 0x800000000000808a, 0x8000000080008000,
                                    0x000000000000808b, 0x0000000080000001, 0x8000000080008081, 0x8000000000008009,
                                    0x000000000000008a, 0x0000000000000088, 0x0000000080008009, 0x000000008000000a,
                                    0x000000008000808b, 0x800000000000008b, 0x8000000000008089, 0x8000000000008003,
                                    0x8000000000008002, 0x8000000000000080, 0x000000000000800a, 0x800000008000000a,
                                    0x8000000080008081, 0x8000000000008080, 0x0000000080000001, 0x8000000080008008};

inline fn KeccakF1600_StatePermute(stack u64[25] state) -> stack u64[25]
{
  inline int round;

  reg ptr u64[24] constptr;

  constptr = KeccakF_RoundConstants;

  for round = 0 to 24 {
    state = keccakP1600_round(state, constptr[round]);
  }

  return state;
}

inline fn keccak_absorb_128_32(stack u64[25] s, stack u8[32] m, reg u8 p) -> stack u64[25]
{
 inline int j;

 reg u8 t8;

 reg u64 i;
 reg u64 mp;
 reg u64 address;
 reg u64 mlen;
 reg u64 t64;

 stack u8[8] load_arg;
 stack u8[200] t;

 mp = 0;
 mlen = 32;

 while (mlen >= SHAKE128_RATE) {

  i = 0;
  while (i < (SHAKE128_RATE / 8)) {

   for j = 0 to 8 {

    address = 8 * i;
    address += mp;
    address += j;

    t8 = m[(int) address];
    load_arg[j] = t8;
   }

   t64 = load64(load_arg);
   s[(int) i] ^= t64;

   i += 1;
  }

  s = KeccakF1600_StatePermute(s);
  mlen -= SHAKE128_RATE;
  mp += SHAKE128_RATE;
 }


 i = 0;
 while (i < SHAKE128_RATE) {
  t[(int) i] = 0;

  i += 1;
 }

 i = 0;
 while (i < mlen) {
  address = mp;
  address += i;
  t8 = m[(int) address];
  t[(int) i] = t8;

  i += 1;
 }

 t[(int) i] = p;
 t[SHAKE128_RATE - 1] |= 128;

 i = 0;
 while (i < (SHAKE128_RATE / 8)) {

  for j = 0 to 8 {
   address = 8 * i;
   address += j;

   t8 = t[(int) address];
   load_arg[j] = t8;
  }

  t64 = load64(load_arg);
  s[(int) i] ^= t64;

  i += 1;
 }

 return s;
}
inline fn keccak_squeezeblocks_128_32(stack u8[32] h, stack u64[25] s) -> stack u8[32], stack u64[25]
{
 inline int i;
 inline int j;

 reg u64 u;
 reg u64 hp;
 reg u64 address;
 reg u64 nblocks;

 nblocks = 32 / SHAKE128_RATE;
 hp = 0;

 while (nblocks > 0) {
  s = KeccakF1600_StatePermute(s);

  for i = 0 to (SHAKE128_RATE / 8) {


   u = s[(int) i];
   for j = 0 to 8 {
    address = 8 * i;
    address += hp;
    address += j;
    h[(int) address] = (8u) u;
    u >>= 8;
   }
  }
  hp += SHAKE128_RATE;
  nblocks -= 1;
 }

 return h, s;
}
inline fn keccak_squeezeblocks_128_128(stack u8[SHAKE128_RATE] h, stack u64[25] s) -> stack u8[SHAKE128_RATE], stack u64[25]
{
 inline int i;
 inline int j;

 reg u64 u;
 reg u64 hp;
 reg u64 address;
 reg u64 nblocks;

 nblocks = 1;
 hp = 0;


 while (nblocks > 0) {
  s = KeccakF1600_StatePermute(s);

  for i = 0 to (SHAKE128_RATE / 8) {


   u = s[(int) i];
   for j = 0 to 8 {
    address = 8 * i;
    address += hp;
    address += j;
    h[(int) address] = (8u) u;
    u >>= 8;
   }
  }
  hp += SHAKE128_RATE;
  nblocks -= 1;
 }

 return h, s;
}

inline fn shake128_32_32(stack u8[32] output, stack u8[32] input) -> stack u8[32]
{
 inline int i;
 inline int nblocks;
 inline int handled;
 inline int remainder;

 reg u8 t8;

 stack u8[SHAKE128_RATE] t;

 stack u64[25] s;

 nblocks = 32 / SHAKE128_RATE;
 handled = nblocks * SHAKE128_RATE;
 remainder = 32 - handled;

 for i = 0 to 25 {
  s[i] = 0;
 }

 s = keccak_absorb_128_32(s, input, 0x1F);

 output, s = keccak_squeezeblocks_128_32(output, s);

 if (remainder > 0) {
  t, s = keccak_squeezeblocks_128_128(t, s);

  for i = 0 to remainder {
   t8 = t[i];
   output[handled + i] = t8;
  }
 }

 return output;
}













inline fn keccak_squeezeblocks_128_KK13N8(stack u8[KK13N8] h, stack u64[25] s) -> stack u8[KK13N8], stack u64[25]
{
 inline int i;
 inline int j;

 reg u64 u;
 reg u64 hp;
 reg u64 address;
 reg u64 nblocks;

 nblocks = KK13N8 / SHAKE128_RATE;
 hp = 0;

 while (nblocks > 0) {
  s = KeccakF1600_StatePermute(s);

  for i = 0 to (SHAKE128_RATE / 8) {


   u = s[(int) i];
   for j = 0 to 8 {
    address = 8 * i;
    address += hp;
    address += j;
    h[(int) address] = (8u) u;
    u >>= 8;
   }
  }
  hp += SHAKE128_RATE;
  nblocks -= 1;
 }

 return h, s;
}


inline fn shake128_KK13N8_32(stack u8[KK13N8] output, stack u8[32] input) -> stack u8[KK13N8]
{
 inline int i;
 inline int nblocks;
 inline int handled;
 inline int remainder;

 reg u8 t8;

 stack u8[SHAKE128_RATE] t;

 stack u64[25] s;

 nblocks = KK13N8 / SHAKE128_RATE;
 handled = nblocks * SHAKE128_RATE;
 remainder = KK13N8 - handled;

 for i = 0 to 25 {
  s[i] = 0;
 }

 s = keccak_absorb_128_32(s, input, 0x1F);

 output, s = keccak_squeezeblocks_128_KK13N8(output, s);

 if (remainder > 0) {
  t, s = keccak_squeezeblocks_128_128(t, s);

  for i = 0 to remainder {
   t8 = t[i];
   output[handled + i] = t8;
  }
 }

 return output;
}







inline fn BS2POL(stack u8[SABER_POLYBYTES] bytes, stack u16[SABER_N] data) -> stack u16[SABER_N]
{
 inline int j;

 reg u16 b1;
 reg u16 b2;
 reg u16 b3;


 for j = 0 to (SABER_N / 8) {

  b1 = (16u) bytes[13 * j];
  b1 &= 0xff;
  b2 = (16u) bytes[13 * j + 1];
  b2 &= 0x1f;
  b2 <<= 8;
  b1 |= b2;
  data[8 * j] = b1;


  b1 = (16u) bytes[13 * j + 1];
  b1 >>= 5;
  b1 &= 0x07;
  b2 = (16u) bytes[13 * j + 2];
  b2 &= 0xff;
  b2 <<= 3;
  b3 = (16u) bytes[13 * j + 3];
  b3 &= 0x03;
  b3 <<= 11;
  b2 |= b3;
  b1 |= b2;
  data[8 * j + 1] = b1;


  b1 = (16u) bytes[13 * j + 3];
  b1 >>= 2;
  b1 &= 0x3f;
  b2 = (16u) bytes[13 * j + 4];
  b2 &= 0x7f;
  b2 <<= 6;
  b1 |= b2;
  data[8 * j + 2] = b1;


  b1 = (16u) bytes[13 * j + 4];
  b1 >>= 7;
  b1 &= 0x01;
  b2 = (16u) bytes[13 * j + 5];
  b2 &= 0xff;
  b2 <<= 1;
  b3 = (16u) bytes[13 * j + 6];
  b3 &= 0x0f;
  b3 <<= 9;
  b2 |= b3;
  b1 |= b2;
  data[8 * j + 3] = b1;


  b1 = (16u) bytes[13 * j + 6];
  b1 >>= 4;
  b1 &= 0x0f;
  b2 = (16u) bytes[13 * j + 7];
  b2 &= 0xff;
  b2 <<= 4;
  b3 = (16u) bytes[13 * j + 8];
  b3 &= 0x01;
  b3 <<= 12;
  b2 |= b3;
  b1 |= b2;
  data[8 * j + 4] = b1;


  b1 = (16u) bytes[13 * j + 8];
  b1 >>= 1;
  b1 &= 0x7f;
  b2 = (16u) bytes[13 * j + 9];
  b2 &= 0x3f;
  b2 <<= 7;
  b1 |= b2;
  data[8 * j + 5] = b1;


  b1 = (16u) bytes[13 * j + 9];
  b1 >>= 6;
  b1 &= 0x03;
  b2 = (16u) bytes[13 * j + 10];
  b2 &= 0xff;
  b2 <<= 2;
  b3 = (16u) bytes[13 * j + 11];
  b3 &= 0x07;
  b3 <<= 10;
  b2 |= b3;
  b1 |= b2;
  data[8 * j + 6] = b1;


  b1 = (16u) bytes[13 * j + 11];
  b1 >>= 3;
  b1 &= 0x1f;
  b2 = (16u) bytes[13 * j + 12];
  b2 &= 0xff;
  b2 <<= 5;
  b1 |= b2;
  data[8 * j + 7] = b1;
 }

 return data;
}

inline fn GenMatrix(stack u16[SABER_KKN] a, stack u8[SABER_SEEDBYTES] seed) -> stack u16[SABER_KKN]
{
 inline int i;
 inline int j;
 inline int one_vector;

 reg u8 t8;

 reg u16 t16;

 reg u64 k;
 reg u64 p;

 stack u8[KK13N8] buf;
 stack u8[SABER_POLYBYTES] tbuf;

 stack u16[SABER_N] temp_ar;

 one_vector = 13 * SABER_N / 8;

 buf = shake128_KK13N8_32(buf, seed);

 for i = 0 to SABER_K {
  for j = 0 to SABER_K {

   p = (i * SABER_K + j) * one_vector;
   k = 0;
   while (k < SABER_POLYBYTES) {
    t8 = buf[(int) p];
    tbuf[(int) k] = t8;

    p += 1;
    k += 1;
   }

   temp_ar = BS2POL(tbuf, temp_ar);

   p = i * SABER_KN + j * SABER_N;
   k = 0;
   while (k < SABER_N) {
    t16 = temp_ar[(int) k];
    t16 &= (SABER_Q - 1);
    a[(int) p] = t16;

    p += 1;
    k += 1;
   }
  }
 }

 return a;
}

























inline fn karatsuba_simple(stack u16[N_SB] a_1, stack u16[N_SB] b_1, stack u16[N_SB_RES] result_final) -> stack u16[N_SB_RES]
{
 inline int i;
 inline int j;
 inline int N;

 reg u16 acc1;
 reg u16 acc2;
 reg u16 acc3;
 reg u16 acc4;
 reg u16 acc5;
 reg u16 acc6;
 reg u16 acc7;
 reg u16 acc8;
 reg u16 acc9;
 reg u16 acc10;
 reg u16 t16;

 stack u16[64 / 2 - 1] d01;
 stack u16[64 / 2 - 1] d0123;
 stack u16[64 / 2 - 1] d23;
 stack u16[64 - 1] result_d01;

 N = 64;


 for i = 0 to (N / 2 - 1) {
  d01[i] = 0;
  d0123[i] = 0;
  d23[i] = 0;
  result_d01[i] = 0;
  result_final[i] = 0;
 }

 for i = (N / 2 - 1) to (N - 1) {
  result_d01[i] = 0;
  result_final[i] = 0;
 }

 for i = (N - 1) to (2 * N - 1) {
  result_final[i] = 0;
 }


 for i = 0 to (N / 4) {
  acc1 = a_1[i];
  acc2 = a_1[i + N / 4];
  acc3 = a_1[i + 2 * N / 4];
  acc4 = a_1[i + 3 * N / 4];

  for j = 0 to (N / 4) {
   acc5 = b_1[j];
   acc6 = b_1[j + N / 4];


   t16 = acc1;
   t16 *= acc5;
   t16 += result_final[i + j];
   result_final[i + j] = t16;


   t16 = acc2;
   t16 *= acc6;
   t16 += result_final[i + j + 2 * N / 4];
   result_final[i + j + 2 * N / 4] = t16;

   acc7 = acc5 + acc6;
   acc8 = acc1 + acc2;


   t16 = acc7;
   t16 *= acc8;
   t16 += d01[i + j];
   d01[i + j] = t16;

   acc7 = b_1[j + 2 * N / 4];
   acc8 = b_1[j + 3 * N / 4];


   t16 = acc7;
   t16 *= acc3;
   t16 += result_final[i + j + 4 * N / 4];
   result_final[i + j + 4 * N / 4] = t16;


   t16 = acc8;
   t16 *= acc4;
   t16 += result_final[i + j + 6 * N / 4];
   result_final[i + j + 6 * N / 4] = t16;

   acc9 = acc3 + acc4;
   acc10 = acc7 + acc8;


   t16 = acc9;
   t16 *= acc10;
   t16 += d23[i + j];
   d23[i + j] = t16;

   acc5 = acc5 + acc7;
   acc7 = acc1 + acc3;


   t16 = acc5;
   t16 *= acc7;
   t16 += result_d01[i + j];
   result_d01[i + j] = t16;

   acc6 = acc6 + acc8;
   acc8 = acc2 + acc4;


   t16 = acc6;
   t16 *= acc8;
   t16 += result_d01[i + j + 2 * N / 4];
   result_d01[i + j + 2 * N / 4] = t16;

   acc5 = acc5 + acc6;
   acc7 = acc7 + acc8;


   t16 = acc5;
   t16 *= acc7;
   t16 += d0123[i + j];
   d0123[i + j] = t16;
  }
 }

 for i = 0 to N / 2 - 1 {

  t16 = d0123[i];
  t16 -= result_d01[i];
  t16 -= result_d01[i + 2 * N / 4];
  d0123[i] = t16;


  t16 = d01[i];
  t16 -= result_final[i];
  t16 -= result_final[i + 2 * N / 4];
  d01[i] = t16;


  t16 = d23[i];
  t16 -= result_final[i + 4 * N / 4];
  t16 -= result_final[i + 6 * N / 4];
  d23[i] = t16;
 }

 for i = 0 to N / 2 -1 {

  t16 = result_d01[i + N / 4];
  t16 += d0123[i];
  result_d01[i + N / 4] = t16;


  t16 = result_final[i + N / 4];
  t16 += d01[i];
  result_final[i + N / 4] = t16;


  t16 = result_final[i + 5 * N / 4];
  t16 += d23[i];
  result_final[i + 5 * N / 4] = t16;
 }

 for i = 0 to N - 1 {

  t16 = result_d01[i];
  t16 -= result_final[i];
  t16 -= result_final[i + N];
  result_d01[i] = t16;
 }

 for i = 0 to N - 1 {

  t16 = result_final[i + N / 2];
  t16 += result_d01[i];
  result_final[i + N / 2] = t16;
 }

 return result_final;
}

inline fn toom_cook_4way(stack u16[SABER_N] a1, stack u16[SABER_N] b1, stack u16[512] result) -> stack u16[512]
{
 inline int i;
 inline int j;

 inline int AB0;
 inline int AB1;
 inline int AB2;
 inline int AB3;

 reg u16 r0;
 reg u16 r1;
 reg u16 r2;
 reg u16 r3;
 reg u16 r4;
 reg u16 r5;
 reg u16 r6;
 reg u16 r7;

 reg u16 t1;
 reg u16 t2;

 reg u32 p1;
 reg u32 p2;

 stack u16[N_SB] aw1;
 stack u16[N_SB] aw2;
 stack u16[N_SB] aw3;
 stack u16[N_SB] aw4;
 stack u16[N_SB] aw5;
 stack u16[N_SB] aw6;
 stack u16[N_SB] aw7;

 stack u16[N_SB] bw1;
 stack u16[N_SB] bw2;
 stack u16[N_SB] bw3;
 stack u16[N_SB] bw4;
 stack u16[N_SB] bw5;
 stack u16[N_SB] bw6;
 stack u16[N_SB] bw7;

 stack u16[N_SB_RES] w1;
 stack u16[N_SB_RES] w2;
 stack u16[N_SB_RES] w3;
 stack u16[N_SB_RES] w4;
 stack u16[N_SB_RES] w5;
 stack u16[N_SB_RES] w6;
 stack u16[N_SB_RES] w7;

 AB0 = 0;
 AB1 = N_SB;
 AB2 = 2 * N_SB;
 AB3 = 3 * N_SB;

 for i = 0 to N_SB_RES {
  w1[i] = 0;
  w2[i] = 0;
  w3[i] = 0;
  w4[i] = 0;
  w5[i] = 0;
  w6[i] = 0;
  w7[i] = 0;
 }

 for j = 0 to N_SB {
  r0 = a1[AB0 + j];
  r1 = a1[AB1 + j];
  r2 = a1[AB2 + j];
  r3 = a1[AB3 + j];
  r4 = r0 + r2;
  r5 = r1 + r3;
  r6 = r4 + r5;
  r7 = r4;
  r7 -= r5;

  aw3[j] = r6;
  aw4[j] = r7;


  t1 = r0;
  t1 <<= 2;
  t1 += r2;
  t1 <<= 1;
  r4 = t1;


  t1 = r1;
  t1 <<= 2;
  t1 += r3;
  r5 = t1;

  r6 = r4 + r5;
  r7 = r4;
  r7 -= r5;

  aw5[j] = r6;
  aw6[j] = r7;


  t1 = r3;
  t1 <<= 3;
  t2 = r2;
  t2 <<= 2;
  t1 += t2;
  t2 = r1;
  t2 <<= 1;
  t1 += t2;
  t1 += r0;
  r4 = t1;

  aw2[j] = r4;
  aw7[j] = r0;
  aw1[j] = r3;
 }

 for j = 0 to N_SB {
  r0 = b1[AB0 + j];
  r1 = b1[AB1 + j];
  r2 = b1[AB2 + j];
  r3 = b1[AB3 + j];
  r4 = r0 + r2;
  r5 = r1 + r3;
  r6 = r4 + r5;
  r7 = r4;
  r7 -= r5;

  bw3[j] = r6;
  bw4[j] = r7;


  t1 = r0;
  t1 <<= 2;
  t1 += r2;
  t1 <<= 1;
  r4 = t1;


  t1 = r1;
  t1 <<= 2;
  t1 += r3;
  r5 = t1;

  r6 = r4 + r5;
  r7 = r4;
  r7 -= r5;

  bw5[j] = r6;
  bw6[j] = r7;


  t1 = r3;
  t1 <<= 3;
  t2 = r2;
  t2 <<= 2;
  t1 += t2;
  t2 = r1;
  t2 <<= 1;
  t1 += t2;
  t1 += r0;
  r4 = t1;

  bw2[j] = r4;
  bw7[j] = r0;
  bw1[j] = r3;
 }

 w1 = karatsuba_simple(aw1, bw1, w1);
 w2 = karatsuba_simple(aw2, bw2, w2);
 w3 = karatsuba_simple(aw3, bw3, w3);
 w4 = karatsuba_simple(aw4, bw4, w4);
 w5 = karatsuba_simple(aw5, bw5, w5);
 w6 = karatsuba_simple(aw6, bw6, w6);
 w7 = karatsuba_simple(aw7, bw7, w7);

 for i = 0 to N_SB_RES {
  r0 = w1[i];
  r1 = w2[i];
  r2 = w3[i];
  r3 = w4[i];
  r4 = w5[i];
  r5 = w6[i];
  r6 = w7[i];

  r1 += r4;
  r5 -= r4;


  p1 = (32u) r3;
  p1 = (32s) p1;
  p2 = (32u) r2;
  p2 = (32s) p2;
  p1 -= p2;
  p1 >>= 1;
  r3 = (16u) p1;

  r4 -= r0;


  t1 = r6;
  t1 <<= 6;
  r4 -= t1;


   r4 <<= 1;
   r4 += r5;

   r2 += r3;


   t1 = r2;
   t1 <<= 6;
   r1 -= t1;
   r1 -= r2;

   r2 -= r6;
   r2 -= r0;


   t1 = 45 * r2;
   r1 += t1;


   p1 = (32u) r2;
   p1 = (32s) p1;
   p1 <<= 3;
   p2 = (32u) r4;
   p2 = (32s) p2;
   p2 -= p1;
   p2 *= 43691;
   p2 >>= 3;
   r4 = (16u) p2;

   r5 += r1;


   p1 = (32u) r3;
   p1 = (32s) p1;
   p1 <<= 4;
   p2 = (32u) r1;
   p2 = (32s) p2;
   p2 += p1;
   p2 *= 36409;
   p2 >>= 1;
   r1 = (16u) p2;


   p1 = (32u) r3;
   p1 = (32s) p1;
   p2 = (32u) r1;
   p2 = (32s) r1;
   p1 += p2;
   p1 *= -1;
   r3 = (16u) p1;


   p1 = (32u) r1;
   p1 = (32s) p1;
   p1 *= 30;
   p2 = (32u) r5;
   p2 = (32s) p2;
   p1 -= p2;
   p1 *= 61167;
   p1 >>= 2;
   r5 = (16u) p1;

   r2 -= r4;
   r1 -= r5;

   result[i] += r6;
   result[i + 64] += r5;
   result[i + 128] += r4;
   result[i + 192] += r3;
   result[i + 256] += r2;
   result[i + 320] += r1;
   result[i + 384] += r0;
 }

 return result;
}

inline fn pol_mul(stack u16[SABER_N] a, stack u16[SABER_N] b, stack u16[SABER_N] res, reg u16 p) -> stack u16[SABER_N]
{
 inline int i;

 reg u16 t16;

 stack u16[512] c;

 for i = 0 to 512 {
  c[i] = 0;
 }

 c = toom_cook_4way(a, b, c);

 for i = SABER_N to 2 * SABER_N {

  t16 = c[i - SABER_N];
  t16 -= c[i];
  res[i - SABER_N] = t16;
  t16 = p - 1;
  res[i - SABER_N] &= t16;
 }

 return res;
}

inline fn MatrixVectorMul(stack u16[SABER_KKN] a, stack u16[SABER_KN] skpv, stack u16[SABER_KN] res, reg u16 transpose) -> stack u16[SABER_KN]
{
 inline int k;

 reg u16 t;

 reg u64 i;
 reg u64 j;
 reg u64 address;
 reg u64 taddress;

 stack u16[SABER_N] acc;

 stack u16[SABER_N] ta;
 stack u16[SABER_N] tb;

 i = 0;
 if (transpose == 1) {
  while (i < SABER_K) {
   j = 0;
   while (j < SABER_K) {


    for k = 0 to SABER_N {

     address = j * SABER_KN;
     taddress = i * SABER_N;
     address += taddress;
     address += k;

     t = a[(int) address];
     ta[k] = t;


     address = j * SABER_N;
     address += k;

     t = skpv[(int) address];
     tb[k] = t;
    }

    acc = pol_mul(ta, tb, acc, SABER_Q);

    for k = 0 to SABER_N {
     t = acc[k];


     address = i * SABER_N;
     address += k;

     res[(int) address] += t;
     res[(int) address] &= (SABER_Q - 1);

     acc[k] = 0;
    }
    j += 1;
   }
   i += 1;
  }
 } else {
  while (i < SABER_K) {
   j = 0;
   while (j < SABER_K) {


    for k = 0 to SABER_N {

     address = i * SABER_KN;
     taddress = j * SABER_N;
     address += taddress;
     address += k;

     t = a[(int) address];
     ta[k] = t;


     address = j * SABER_N;
     address += k;

     t = skpv[(int) address];
     tb[k] = t;
    }

    acc = pol_mul(ta, tb, acc, SABER_Q);

    for k = 0 to SABER_N {
     t = acc[k];


     address = i * SABER_N;
     address += k;

     res[(int) address] += t;
     res[(int) address] &= (SABER_Q - 1);

     acc[k] = 0;
    }
    j += 1;
   }
   i += 1;
  }
 }

 return res;
}













inline fn keccak_squeezeblocks_128_MUNK8(stack u8[MUNK8] h, stack u64[25] s) -> stack u8[MUNK8], stack u64[25]
{
 inline int i;
 inline int j;

 reg u64 u;
 reg u64 hp;
 reg u64 address;
 reg u64 nblocks;

 nblocks = MUNK8 / SHAKE128_RATE;
 hp = 0;

 while (nblocks > 0) {
  s = KeccakF1600_StatePermute(s);

  for i = 0 to (SHAKE128_RATE / 8) {


   u = s[(int) i];
   for j = 0 to 8 {
    address = 8 * i;
    address += hp;
    address += j;
    h[(int) address] = (8u) u;
    u >>= 8;
   }
  }
  hp += SHAKE128_RATE;
  nblocks -= 1;
 }

 return h, s;
}


inline fn shake128_MUNK8_32(stack u8[MUNK8] output, stack u8[32] input) -> stack u8[MUNK8]
{
 inline int i;
 inline int nblocks;
 inline int handled;
 inline int remainder;

 reg u8 t8;

 stack u8[SHAKE128_RATE] t;

 stack u64[25] s;

 nblocks = MUNK8 / SHAKE128_RATE;
 handled = nblocks * SHAKE128_RATE;
 remainder = MUNK8 - handled;

 for i = 0 to 25 {
  s[i] = 0;
 }

 s = keccak_absorb_128_32(s, input, 0x1F);

 output, s = keccak_squeezeblocks_128_MUNK8(output, s);

 if (remainder > 0) {
  t, s = keccak_squeezeblocks_128_128(t, s);

  for i = 0 to remainder {
   t8 = t[i];
   output[handled + i] = t8;
  }
 }

 return output;
}













inline fn load_littleendian(stack u8[4] x) -> reg u32
{
 inline int i;

 reg u32 t;
 reg u32 r;

 r = (32u) x[0];

 for i = 1 to 4 {
  t = (32u) x[i];
  t <<= (8 * i);
  r |= t;
 }

 return r;
}

inline fn cbd(stack u16[SABER_N] r, stack u8[SABER_N] buf) -> stack u16[SABER_N]
{
 inline int i;

 reg u8 t8;

 reg u16 t16;

 reg u32 t32;
 reg u32 d;
 reg u32 tt;

 stack u8[4] bufarg;

 stack u32[4] a;
 stack u32[4] b;

 for i = 0 to (SABER_N / 4) {
  t8 = buf[4 * i];
  bufarg[0] = t8;

  t8 = buf[4 * i + 1];
  bufarg[1] = t8;

  t8 = buf[4 * i + 2];
  bufarg[2] = t8;

  t8 = buf[4 * i + 3];
  bufarg[3] = t8;

  t32 = load_littleendian(bufarg);
  d = 0;


  tt = t32;
  tt >>= 0;
  tt &= 0x11111111;
  d += tt;

  tt = t32;
  tt >>= 1;
  tt &= 0x11111111;
  d += tt;

  tt = t32;
  tt >>= 2;
  tt &= 0x11111111;
  d += tt;

  tt = t32;
  tt >>= 3;
  tt &= 0x11111111;
  d += tt;


     t32 = d;
     t32 &= 0xf;
  a[0] = t32;


     t32 = d;
     t32 >>= 4;
     t32 & = 0xf;
     b[0] = t32;


     t32 = d;
     t32 >>= 8;
     t32 &= 0xf;
     a[1] = t32;


     t32 = d;
     t32 >>= 12;
     t32 &= 0xf;
     b[1] = t32;


     t32 = d;
     t32 >>= 16;
     t32 &= 0xf;
     a[2] = t32;


  t32 = d;
     t32 >>= 20;
     t32 &= 0xf;
     b[2] = t32;


     t32 = d;
     t32 >>= 24;
     t32 &= 0xf;
     a[3] = t32;


     t32 = d;
     t32 >>= 28;
     b[3] = t32;


     t32 = a[0];
     t32 -= b[0];
     t16 = (16u) t32;
     t16 &= (SABER_Q - 1);
     r[4 * i] = t16;


     t32 = a[1];
     t32 -= b[1];
     t16 = (16u) t32;
        t16 &= (SABER_Q - 1);
     r[4 * i + 1] = t16;


     t32 = a[2];
     t32 -= b[2];
     t16 = (16u) t32;
     t16 &= (SABER_Q - 1);
     r[4 * i + 2] = t16;


     t32 = a[3];
     t32 -= b[3];
     t16 = (16u) t32;
     t16 &= (SABER_Q - 1);
     r[4 * i + 3] = t16;
 }

 return r;
}

inline fn GenSecret(stack u16[SABER_KN] r, stack u8[SABER_COINBYTES] seed) -> stack u16[SABER_KN]
{
 inline int i;
 inline int j;

 reg u8 t8;
 reg u16 t16;

 stack u8[MUNK8] buf;

 stack u16[SABER_N] tr;
 stack u8[SABER_N] tbuf;

 buf = shake128_MUNK8_32(buf, seed);

 for i = 0 to SABER_K {

  for j = 0 to SABER_N {
   t8 = buf[i * SABER_MU * SABER_N / 8 + j];
   tbuf[j] = t8;
  }

  tr = cbd(tr, tbuf);


  for j = 0 to SABER_N {
   t16 = tr[j];
   r[i * SABER_N + j] = t16;
  }
 }

 return r;
}







inline fn POLVECq2BS(stack u8[SABER_POLYVECBYTES] bytes, stack u16[SABER_KN] data) -> stack u8[SABER_POLYVECBYTES]
{
 inline int i;
 inline int j;

 reg u16 d1;
 reg u16 d2;

 for i = 0 to SABER_K {
  for j = 0 to (SABER_N / 8) {



   d1 = data[i * SABER_N + 8 * j];
   d1 &= 0xff;
   bytes[i * (SABER_N * 13) / 8 + 13 * j] = (8u) d1;


   d1 = data[i * SABER_N + 8 * j];
   d1 >>= 8;
   d1 &= 0x1f;
   d2 = data[i * SABER_N + 8 * j + 1];
   d2 &= 0x07;
   d2 <<= 5;
   d1 |= d2;
   bytes[i * (SABER_N * 13) / 8 + 13 * j + 1] = (8u) d1;


   d1 = data[i * SABER_N + 8 * j + 1];
   d1 >>= 3;
   d1 &= 0xff;
   bytes[i * (SABER_N * 13) / 8 + 13 * j + 2] = (8u) d1;


   d1 = data[i * SABER_N + 8 * j + 1];
   d1 >>= 11;
   d1 &= 0x03;
   d2 = data[i * SABER_N + 8 * j + 2];
   d2 &= 0x3f;
   d2 <<= 2;
   d1 |= d2;
   bytes[i * (SABER_N * 13) / 8 + 13 * j + 3] = (8u) d1;


   d1 = data[i * SABER_N + 8 * j + 2];
   d1 >>= 6;
   d1 &= 0x7f;
   d2 = data[i * SABER_N + 8 * j + 3];
   d2 &= 0x01;
   d2 <<= 7;
   d1 |= d2;
   bytes[i * (SABER_N * 13) / 8 + 13 * j + 4] = (8u) d1;


   d1 = data[i * SABER_N + 8 * j + 3];
   d1 >>= 1;
   d1 &= 0xff;
   bytes[i * (SABER_N * 13) / 8 + 13 * j + 5] = (8u) d1;


   d1 = data[i * SABER_N + 8 * j + 3];
   d1 >>= 9;
   d1 &= 0x0f;
   d2 = data[i * SABER_N + 8 * j + 4];
   d2 &= 0x0f;
   d2 <<= 4;
   d1 |= d2;
   bytes[i * (SABER_N * 13) / 8 + 13 * j + 6] = (8u) d1;


   d1 = data[i * SABER_N + 8 * j + 4];
   d1 >>= 4;
   d1 &= 0xff;
   bytes[i * (SABER_N * 13) / 8 + 13 * j + 7] = (8u) d1;


   d1 = data[i * SABER_N + 8 * j + 4];
   d1 >>= 12;
   d1 &= 0x01;
   d2 = data[i * SABER_N + 8 * j + 5];
   d2 &= 0x7f;
   d2 <<= 1;
   d1 |= d2;
   bytes[i * (SABER_N * 13) / 8 + 13 * j + 8] = (8u) d1;


   d1 = data[i * SABER_N + 8 * j + 5];
   d1 >>= 7;
   d1 &= 0x3f;
   d2 = data[i * SABER_N + 8 * j + 6];
   d2 &= 0x03;
   d2 <<= 6;
   d1 |= d2;
   bytes[i * (SABER_N * 13) / 8 + 13 * j + 9] = (8u) d1;


   d1 = data[i * SABER_N + 8 * j + 6];
   d1 >>= 2;
   d1 &= 0xff;
   bytes[i * (SABER_N * 13) / 8 + 13 * j + 10] = (8u) d1;


   d1 = data[i * SABER_N + 8 * j + 6];
   d1 >>= 10;
   d1 &= 0x07;
   d2 = data[i * SABER_N + 8 * j + 7];
   d2 &= 0x1f;
   d2 <<= 3;
   d1 |= d2;
   bytes[i * (SABER_N * 13) / 8 + 13 * j + 11] = (8u) d1;


   d1 = data[i * SABER_N + 8 * j + 7];
   d1 >>= 5;
   d1 &= 0xff;
   bytes[i * (SABER_N * 13) / 8 + 13 * j + 12] = (8u) d1;
  }
 }

 return bytes;
}







inline fn POLVECp2BS(stack u8[SABER_POLYVECCOMPRESSEDBYTES] bytes, stack u16[SABER_KN] data) -> stack u8[SABER_POLYVECCOMPRESSEDBYTES]
{
 inline int i;
 inline int j;

 reg u16 d1;
 reg u16 d2;

 for i = 0 to SABER_K {
  for j = 0 to (SABER_N / 4) {

   d1 = data[i * SABER_N + 4 * j];
   d1 &= 0xff;
   bytes[i * (SABER_N * 10) / 8 + 5 * j] = (8u) d1;


   d1 = data[i * SABER_N + 4 * j];
   d1 >>= 8;
   d1 &= 0x03;
   d2 = data[i * SABER_N + 4 * j + 1];
   d2 &= 0x3f;
   d2 <<= 2;
   d1 |= d2;
   bytes[i * (SABER_N * 10) / 8 + 5 * j + 1] = (8u) d1;


   d1 = data[i * SABER_N + 4 * j + 1];
   d1 >>= 6;
   d1 &= 0x0f;
   d2 = data[i * SABER_N + 4 * j + 2];
   d2 &= 0x0f;
   d2 <<= 4;
   d1 |= d2;
   bytes[i * (SABER_N * 10) / 8 + 5 * j + 2] = (8u) d1;


   d1 = data[i * SABER_N + 4 * j + 2];
   d1 >>= 4;
   d1 &= 0x3f;
   d2 = data[i * SABER_N + 4 * j + 3];
   d2 &= 0x03;
   d2 <<= 6;
   d1 |= d2;
   bytes[i * (SABER_N * 10) / 8 + 5 * j + 3] = (8u) d1;


   d1 = data[i * SABER_N + 4 * j + 3];
   d1 >>= 2;
   d1 &= 0xff;
   bytes[i * (SABER_N * 10) / 8 + 5 * j + 4] = (8u) d1;
  }
 }

 return bytes;
}

inline fn indcpa_kem_keypair_randominc(stack u8[SABER_INDCPA_PUBLICKEYBYTES] pk, stack u8[SABER_INDCPA_SECRETKEYBYTES] sk, stack u8[SABER_SEEDBYTES] seed, stack u8[SABER_COINBYTES] noiseseed) -> stack u8[SABER_INDCPA_PUBLICKEYBYTES], stack u8[SABER_INDCPA_SECRETKEYBYTES]
{
 inline int i;
 inline int j;

 reg u8 t8;

 stack u8[SABER_POLYVECCOMPRESSEDBYTES] tpk;

 stack u16[SABER_KKN] a;
 stack u16[SABER_KN] skpv;
 stack u16[SABER_KN] res;


 seed = shake128_32_32(seed, seed);

 a = GenMatrix(a, seed);

 skpv = GenSecret(skpv, noiseseed);

 for i = 0 to SABER_K {
  for j = 0 to SABER_N {
   res[i * SABER_N + j] = 0;
  }
 }

 res = MatrixVectorMul(a, skpv, res, 1);

 for i = 0 to SABER_K {
  for j = 0 to SABER_N {
   res[i * SABER_N + j] += h1;
   res[i * SABER_N + j] &= (SABER_Q - 1);
   res[i * SABER_N + j] >>= (SABER_EQ - SABER_EP);
  }
 }

 sk = POLVECq2BS(sk, skpv);

 tpk = POLVECp2BS(tpk, res);


 for i = 0 to SABER_POLYVECCOMPRESSEDBYTES {
  t8 = tpk[i];
  pk[i] = t8;
 }

 for i = 0 to SABER_SEEDBYTES {
  t8 = seed[i];
  pk[SABER_POLYVECCOMPRESSEDBYTES + i] = t8;
 }

 return pk, sk;
}






inline fn keccak_absorb_256_PUBKEYBYTES(stack u64[25] s, stack u8[SABER_INDCPA_PUBLICKEYBYTES] m, reg u8 p) -> stack u64[25]
{
 inline int j;

 reg u8 t8;

 reg u64 i;
 reg u64 mp;
 reg u64 address;
 reg u64 mlen;
 reg u64 t64;

 stack u8[8] load_arg;
 stack u8[200] t;

 mp = 0;
 mlen = SABER_INDCPA_PUBLICKEYBYTES;
 while (mlen >= SHA3_256_RATE) {

  i = 0;
  while (i < (SHA3_256_RATE / 8)) {

   for j = 0 to 8 {

    address = 8 * i;
    address += mp;
    address += j;

    t8 = m[(int) address];
    load_arg[j] = t8;
   }

   t64 = load64(load_arg);
   s[(int) i] ^= t64;

   i += 1;
  }

  s = KeccakF1600_StatePermute(s);
  mlen -= SHA3_256_RATE;
  mp += SHA3_256_RATE;
 }


 i = 0;
 while (i < SHA3_256_RATE) {
  t[(int) i] = 0;

  i += 1;
 }

 i = 0;
 while (i < mlen) {
  address = mp;
  address += i;
  t8 = m[(int) address];
  t[(int) i] = t8;

  i += 1;
 }

 t[(int) i] = p;
 t[SHA3_256_RATE - 1] |= 128;

 i = 0;
 while (i < (SHA3_256_RATE / 8)) {

  for j = 0 to 8 {
   address = 8 * i;
   address += j;

   t8 = t[(int) address];
   load_arg[j] = t8;
  }

  t64 = load64(load_arg);
  s[(int) i] ^= t64;

  i += 1;
 }

 return s;
}
inline fn keccak_squeezeblocks_256_256(stack u8[SHA3_256_RATE] h, stack u64[25] s) -> stack u8[SHA3_256_RATE], stack u64[25]
{
 inline int i;
 inline int j;

 reg u64 u;
 reg u64 hp;
 reg u64 address;
 reg u64 nblocks;

 nblocks = 1;
 hp = 0;


 while (nblocks > 0) {
  s = KeccakF1600_StatePermute(s);

  for i = 0 to (SHA3_256_RATE / 8) {


   u = s[(int) i];
   for j = 0 to 8 {
    address = 8 * i;
    address += hp;
    address += j;
    h[(int) address] = (8u) u;
    u >>= 8;
   }
  }
  hp += SHA3_256_RATE;
  nblocks -= 1;
 }

 return h, s;
}

inline fn sha3_256_PUBKEYBYTES(stack u8[32] output, stack u8[SABER_INDCPA_PUBLICKEYBYTES] input) -> stack u8[32]
{
 inline int i;

 reg u8 t8;

 stack u8[SHA3_256_RATE] t;

 stack u64[25] s;

 for i = 0 to 25 {
  s[i] =0;
 }

 s = keccak_absorb_256_PUBKEYBYTES(s, input, 0x06);

 t, s = keccak_squeezeblocks_256_256(t, s);

 for i = 0 to 32 {
  t8 = t[i];
  output[i] = t8;
 }

 return output;
}

inline fn crypto_kem_keypair_randominc(stack u8[SABER_PUBLICKEYBYTES] pk, stack u8[SABER_SECRETKEYBYTES] sk, stack u8[SABER_KEYBYTES] random_bytes_crypto, stack u8[SABER_SEEDBYTES] indcpa_seed, stack u8[SABER_COINBYTES] indcpa_noiseseed) -> stack u8[SABER_PUBLICKEYBYTES], stack u8[SABER_SECRETKEYBYTES]
{
 inline int i;

 reg u8 t8;

 stack u8[SABER_INDCPA_PUBLICKEYBYTES] tpk;
 stack u8[SABER_INDCPA_SECRETKEYBYTES] tsk;
 stack u8[SABER_HASHBYTES] tsha3256hash;

 tpk, tsk = indcpa_kem_keypair_randominc(tpk, tsk, indcpa_seed, indcpa_noiseseed);


 for i = 0 to SABER_INDCPA_PUBLICKEYBYTES {
  t8 = tpk[i];
  pk[i] = t8;
 }

 for i = 0 to SABER_INDCPA_SECRETKEYBYTES {
  t8 = tsk[i];
  sk[i] = t8;
 }

 for i = 0 to SABER_INDCPA_PUBLICKEYBYTES {
  t8 = pk[i];
  sk[i + SABER_INDCPA_SECRETKEYBYTES] = t8;
 }

 tsha3256hash = sha3_256_PUBKEYBYTES(tsha3256hash, pk);

 for i = 0 to SABER_HASHBYTES {
  t8 = tsha3256hash[i];
  sk[SABER_SECRETKEYBYTES - 64 + i] = t8;
 }

 for i = 0 to SABER_KEYBYTES {
  t8 = random_bytes_crypto[i];
  sk[SABER_SECRETKEYBYTES - SABER_KEYBYTES + i] = t8;
 }

 return pk, sk;
}




export fn crypto_kem_keypair_randominc_jazz(reg u64 pkp, reg u64 skp, reg u64 random_bytes_cryptop, reg u64 indcpa_seedp, reg u64 indcpa_noiseseedp)
{
 inline int i;

 reg u8 t8;

 stack u8[SABER_PUBLICKEYBYTES] pk;
 stack u8[SABER_SECRETKEYBYTES] sk;
 stack u8[SABER_KEYBYTES] random_bytes_crypto;
 stack u8[SABER_SEEDBYTES] indcpa_seed;
 stack u8[SABER_COINBYTES] indcpa_noiseseed;

 for i = 0 to SABER_PUBLICKEYBYTES {
  t8 = (u8) [pkp + i];
  pk[i] = t8;
 }

 for i = 0 to SABER_SECRETKEYBYTES {
  t8 = (u8) [skp + i];
  sk[i] = t8;
 }

 for i = 0 to SABER_KEYBYTES {
  t8 = (u8) [random_bytes_cryptop + i];
  random_bytes_crypto[i] = t8;
 }

 for i = 0 to SABER_SEEDBYTES {
  t8 = (u8) [indcpa_seedp + i];
  indcpa_seed[i] = t8;
 }

 for i = 0 to SABER_COINBYTES {
  t8 = (u8) [indcpa_noiseseedp + i];
  indcpa_noiseseed[i] = t8;
 }

 pk, sk = crypto_kem_keypair_randominc(pk, sk, random_bytes_crypto, indcpa_seed, indcpa_noiseseed);

 for i = 0 to SABER_PUBLICKEYBYTES {
  t8 = pk[i] ;
  (u8) [pkp + i] = t8;
 }

 for i = 0 to SABER_SECRETKEYBYTES {
  t8 = sk[i];
  (u8) [skp + i] = t8;
 }
}
