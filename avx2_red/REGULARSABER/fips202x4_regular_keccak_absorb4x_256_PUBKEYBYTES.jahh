/*** fips202x4_regular_keccak_absorb4x_256_PUBKEYBYTES.jahh: File containing the Jasmin implementation of keccak_absorb4x function from fips202x4.c, where rate == SHA3256RATE, mlen == SABER_INDCPA_PUBLICKEYBYTES and with (regular) SABER parameters ***/

#ifndef KECCAK_ABSORB4X_256_PUBKEYBYTES_HH
#define KECCAK_ABSORB4X_256_PUBKEYBYTES_HH

#include "SABER_params.jahh"
#include "fips202x4_regular_KeccakF1600_StatePermute4x.jahh"
#include "fips202x4_regular_load64.jahh"

inline fn keccak_absorb4x_256_PUBKEYBYTES(reg ptr u256[25] s, reg ptr u8[SABER_INDCPA_PUBLICKEYBYTES] m0, reg ptr u8[SABER_INDCPA_PUBLICKEYBYTES] m1, reg ptr u8[SABER_INDCPA_PUBLICKEYBYTES] m2, reg ptr u8[SABER_INDCPA_PUBLICKEYBYTES] m3) -> reg ptr u256[25]
{
	inline int i;
	inline int j;
	inline int iterations;
	inline int handled;
	inline int remainder;

	reg u8 t8;

	reg u64 t64;

	stack u8[200] t0;
	stack u8[200] t1;
	stack u8[200] t2;
	stack u8[200] t3;

	iterations = SABER_INDCPA_PUBLICKEYBYTES / SHA3_256_RATE;
	handled = iterations * SHA3_256_RATE;
	remainder = SABER_INDCPA_PUBLICKEYBYTES - handled;

	for j = 0 to iterations {
		for i = 0 to (SHA3_256_RATE / 8) {
			// load64
			t64 = load64(m0[j * SHA3_256_RATE + 8 * i:8]);
			s[u64 4 * i] ^= t64;
			t64 = load64(m1[j * SHA3_256_RATE + 8 * i:8]);
			s[u64 4 * i + 1] ^= t64;
			t64 = load64(m2[j * SHA3_256_RATE + 8 * i:8]);
			s[u64 4 * i + 2] ^= t64;
			t64 = load64(m3[j * SHA3_256_RATE + 8 * i:8]);
			s[u64 4 * i + 3] ^= t64;
		}

		s = KeccakF1600_StatePermute4x(s);
	}

	for i = 0 to SHA3_256_RATE {
		t0[i] = 0;
		t1[i] = 0;
		t2[i] = 0;
		t3[i] = 0;
	}

	for i = 0 to remainder {
		t8 = m0[handled + i];
		t0[i] = t8;
		t8 = m1[handled + i];
		t1[i] = t8;
		t8 = m2[handled + i];
		t2[i] = t8;
		t8 = m3[handled + i];
		t3[i] = t8;
	}

	t0[remainder] = 0x06;
	t1[remainder] = 0x06;
	t2[remainder] = 0x06;
	t3[remainder] = 0x06;

	t0[SHA3_256_RATE - 1] |= 128;
	t1[SHA3_256_RATE - 1] |= 128;
	t2[SHA3_256_RATE - 1] |= 128;
	t3[SHA3_256_RATE - 1] |= 128;

	for i = 0 to (SHA3_256_RATE / 8) {
		t64 = load64(t0[8 * i:8]);
		s[u64 4 * i] ^= t64;
		t64 = load64(t1[8 * i:8]);
		s[u64 4 * i + 1] ^= t64;
		t64 = load64(t2[8 * i:8]);
		s[u64 4 * i + 2] ^= t64;
		t64 = load64(t3[8 * i:8]);
		s[u64 4 * i + 3] ^= t64;
	}

	return s;
}

#endif