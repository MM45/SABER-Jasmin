/*** SABER_indcpa_regular_GenMatrix.jahh: File containing the Jasmin implementation of the GenMatrix function from SABER_indcpa.c, with (regular) SABER parameters ***/

#ifndef GENMATRIX_HH
#define GENMATRIX_HH

#include "SABER_params.jahh"
#include "fips202_regular_shake128_KK13N8_32.jahh"
#include "SABER_indcpa_regular_BS2POLq.jahh"

inline fn GenMatrix(reg ptr u16[SABER_KKN] a, reg ptr u8[SABER_SEEDBYTES] seed) -> reg ptr u16[SABER_KKN]
{
	reg u64 k;

	stack u8[KK13N8] buf;

	stack u16[SABER_N] temp_ar;

	stack ptr u16[SABER_KKN] sa;

	sa = a;

	buf = shake128_KK13N8_32(buf, seed);

	a = sa;

	a[0:SABER_N] = BS2POLq(buf[0:SABER_POLYBYTES], a[0:SABER_N]);
	a[SABER_N:SABER_N] = BS2POLq(buf[(13 * SABER_N / 8):SABER_POLYBYTES], a[SABER_N:SABER_N]);
	a[2 * SABER_N:SABER_N] = BS2POLq(buf[2 * (13 * SABER_N / 8):SABER_POLYBYTES], a[2 * SABER_N:SABER_N]);
	a[3 * SABER_N:SABER_N] = BS2POLq(buf[3 * (13 * SABER_N / 8):SABER_POLYBYTES], a[3 * SABER_N:SABER_N]);
	a[4 * SABER_N:SABER_N] = BS2POLq(buf[4 * (13 * SABER_N / 8):SABER_POLYBYTES], a[4 * SABER_N:SABER_N]);
	a[5 * SABER_N:SABER_N] = BS2POLq(buf[5 * (13 * SABER_N / 8):SABER_POLYBYTES], a[5 * SABER_N:SABER_N]);
	a[6 * SABER_N:SABER_N] = BS2POLq(buf[6 * (13 * SABER_N / 8):SABER_POLYBYTES], a[6 * SABER_N:SABER_N]);
	a[7 * SABER_N:SABER_N] = BS2POLq(buf[7 * (13 * SABER_N / 8):SABER_POLYBYTES], a[7 * SABER_N:SABER_N]);
	a[8 * SABER_N:SABER_N] = BS2POLq(buf[8 * (13 * SABER_N / 8):SABER_POLYBYTES], a[8 * SABER_N:SABER_N]);

	k = 0;
	while (k < SABER_KKN) {
		a[(int) k] &= (SABER_Q - 1);

		k += 1;
	}
	
	return a;
}

#endif