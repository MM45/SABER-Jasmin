/*** SABER_indcpa_regular_indcpa_kem_enc.jahh: File containing the Jasmin implementation of the indcpa_kem_enc function from SABER_indcpa.c, with (regular) SABER parameters ***/

#ifndef INDCPA_KEM_ENC_HH
#define INDCPA_KEM_ENC_HH

#include "SABER_params.jahh"
#include "SABER_indcpa_regular_GenMatrix.jahh"
#include "SABER_indcpa_regular_GenSecret.jahh"
#include "pack_unpack_regular_POLVECp2BS.jahh"
#include "pack_unpack_regular_BS2POLVECp.jahh"
#include "pack_unpack_regular_SABER_pack_4bit.jahh"

#include "SABER_indcpa_regular_dummy_mv_mul.jahh" // TODO: REMOVE ONCE REAL MUL IS HERE
#include "SABER_indcpa_regular_dummy_vv_mul.jahh" // TODO: REMOVE ONCE REAL MUL IS HERE

inline fn indcpa_kem_enc(stack u8[SABER_KEYBYTES] message_received, stack u8[32] noiseseed, stack u8[SABER_INDCPA_PUBLICKEYBYTES] pk, stack u8[SABER_BYTES_CCA_DEC] ciphertext) -> stack u8[SABER_BYTES_CCA_DEC]
{
	inline int i;
	inline int j;
	inline int k;

	reg u8 t8;
	
	reg u16 t16;

	reg u256 mod;
	reg u256 modp;
	reg u256 H1_avx;
	reg u256 t256;
	reg u256 tt256;

	stack u8[SABER_SEEDBYTES] seed;
	stack u8[SABER_SCALEBYTES_KEM] msk_c;
	
	stack u16[SABER_KKN] a;
	stack u16[SABER_KN] pkcl;
	stack u16[SABER_KN] skpv1;
	stack u16[SABER_KN] temp;
	stack u16[SABER_KEYBYTES * 8] message;

	stack u256[SABER_N / 16] temp_avx;
	stack u256[SABER_KKN / 16] a_avx;
	stack u256[SABER_KN / 16] res_avx;
	stack u256[SABER_KN / 16] sk_avx;
	stack u256[SABER_KN / 16] pkcl_avx;
	stack u256[SABER_N / 16] vprime_avx;
	stack u256[SABER_N / 16] message_avx;
	//stack u256[SABER_K * 64] b_bucket;

	stack u256 sH1_avx;
	stack u256 smodp;

	// TODO: remove once multiplication is implemented
	for i = 0 to SABER_KN / 16 {
		t256 = zero_u256;
		res_avx[i] = t256;
	}

	mod = modq_16u16;
	modp = modp_16u16;
	H1_avx = h1_16u16;

	for i = 0 to SABER_SEEDBYTES {
		t8 = pk[SABER_POLYVECCOMPRESSEDBYTES + i];
		seed[i] = t8;
	}

	a = GenMatrix(a, seed);

	skpv1 = GenSecret(skpv1, noiseseed);

	for i = 0 to SABER_K {
		for j = 0 to SABER_N / 16 {
			t256 = skpv1[u256 i * SABER_N / 16 + j];
			sk_avx[i * SABER_N / 16 + j] = t256;
		}
	}

	for i = 0 to SABER_K {
		for j = 0 to SABER_K {
			for k = 0 to SABER_N / 16 {
				t256 = a[u256 i * SABER_KN / 16 + j * SABER_N / 16 + k];
				a_avx[i * SABER_KN / 16 + j * SABER_N / 16 + k] = t256;
			}
		}
	}

	//res = MatrixVectorMul(a, skpv1, res, 0);
	// TODO: REMOVE DUMMY MUL ONCE REAL MUL IS HERE
	res_avx = dummy_mv_mul(a_avx, sk_avx, res_avx);

	for i = 0 to SABER_KN / 16 {
		t256 = res_avx[i];
		t256 +16u16= H1_avx;
		t256 >>16u16= (SABER_EQ - SABER_EP);
		t256 &16u16= mod;
		res_avx[i] = t256;
	}
	
	for i = 0 to SABER_K {
		for j = 0 to SABER_N / 16 {
			t256 = res_avx[i * SABER_N / 16 + j];
			temp[u256 i * SABER_N / 16 + j] = t256;
		}
	}

	sH1_avx = H1_avx;
	smodp = modp;

	ciphertext[0:SABER_POLYVECCOMPRESSEDBYTES] = POLVECp2BS(ciphertext[0:SABER_POLYVECCOMPRESSEDBYTES], temp);

	pkcl = BS2POLVECp(pk[0:SABER_POLYVECCOMPRESSEDBYTES], pkcl);

	H1_avx = sH1_avx;
	modp = smodp;
	
	for i = 0 to SABER_K {
		for j = 0 to SABER_N / 16 {
			t256 = pkcl[u256 i * SABER_N / 16 + j]; //load_16u16(pkcl[i * SABER_N + j * 16:16]);
			pkcl_avx[i * SABER_N / 16 + j] = t256;
		}
	}

	for i = 0 to SABER_N / 16 {
		t256 = vprime_avx[i];
		t256 ^16u16= t256;
		vprime_avx[i] = t256; 
	}

	//vprime = InnerProd(pkcl, skpv1, vprime);
	// TODO: REMOVE DUMMY MUL ONCE REAL MUL IS HERE
	vprime_avx = dummy_vv_mul(pkcl_avx, sk_avx, vprime_avx);

	for i = 0 to SABER_N / 16 {
		t256 = vprime_avx[i];
		t256 +16u16= H1_avx;
		vprime_avx[i] = t256;
	}

	for j = 0 to SABER_KEYBYTES {
		for i = 0 to 8 {
			// message[8*j+i] = ((message_received[j]>>i) & 0x01);
			t16 = (16u) message_received[j];
			t16 >>= i;
			t16 &= 0x01;
			message[8 * j + i] = t16;
		}
	}

	for i = 0 to SABER_N / 16 {
		t256 = message[u256 i];
		t256 <<16u16= (SABER_EP - 1);
		message_avx[i] = t256;
	}


	for k = 0 to SABER_N / 16 {
		t256 = vprime_avx[k];
		t256 -16u16= message_avx[k];
		t256 &16u16= modp;
		t256 >>16u16= (SABER_EP-SABER_ET);
		vprime_avx[k] = t256;
	}

	for j = 0 to SABER_N / 16 {
		t256 = vprime_avx[j];
		temp[u256 j] = t256;//store_16u16(t256, temp[j * 16:16]);
	}

	msk_c = SABER_pack_4bit(msk_c, temp[0:SABER_N]);

	for j = 0 to SABER_SCALEBYTES_KEM {
		t8 = msk_c[j];
		ciphertext[SABER_POLYVECCOMPRESSEDBYTES + j] = t8;
	}

	return ciphertext;
}

#endif
