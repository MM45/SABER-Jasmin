/*** fips202_regular_shake128_MUNK8_32.jahh: File containing the Jasmin implementation of shake128 function from fips202.c, where outlen == MUNK8, inlen == 32 and with (regular) SABER parameters ***/

#ifndef SHAKE128_MUNK8_32_HH
#define SHAKE128_MUNK8_32_HH

#include "SABER_params.jahh"
#include "fips202_regular_KeccakF1600_StatePermute.jahh"
#include "fips202_regular_keccak_absorb_128_32.jahh"
#include "fips202_regular_keccak_squeezeblocks_128_128.jahh"

inline fn shake128_MUNK8_32(reg ptr u8[MUNK8] output, reg ptr u8[32] input) -> reg ptr u8[MUNK8]
{
	inline int i;
	inline int nblocks;

	reg u256[3] t256;

	stack u64[25] s;

	nblocks = 4; // MUNK8 / SHAKE128_RATE

	t256[0] = zero_u256;
	
	for i = 0 to 6 {
		s[u256 i] = t256[0];
	}
	s[24] = 0;

	s = keccak_absorb_128_32(s, input);

	// output, s = keccak_squeezeblocks_128_MUNK8(output, s);
	for i = 0 to nblocks {
		output[i * SHAKE128_RATE:SHAKE128_RATE], s = keccak_squeezeblocks_128_128(output[i * SHAKE128_RATE:SHAKE128_RATE], s);
	}

	s = KeccakF1600_StatePermute(s);

	t256[0] = s[u256 0];
	t256[1] = s[u256 1];
	t256[2] = s[u256 2];

	output[u256 21] = t256[0];
	output[u256 22] = t256[1];
	output[u256 23] = t256[2];

	return output;
}

#endif