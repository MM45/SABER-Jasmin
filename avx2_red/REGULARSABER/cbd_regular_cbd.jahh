/*** cbd_regular_cbd.jahh: File containing the Jasmin implementation of cbd function from cbd.c, with (regular) SABER parameters ***/

#ifndef CBD_HH
#define CBD_HH

#include "SABER_params.jahh"

u256 one_mask_glob = 0x1111111111111111111111111111111111111111111111111111111111111111;
u256 f_mask_glob = 0x0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f;
u256 qmod_mask_glob = 0x00001fff00001fff00001fff00001fff00001fff00001fff00001fff00001fff;
u256 sixteen_bit_mask_glob = 0x0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff;

fn cbd(reg ptr u16[SABER_N] r, reg ptr u8[SABER_N] buf) -> reg ptr u16[SABER_N]
{
    inline int i;

    reg u256 tt256;
    reg u256 one_mask;
    reg u256 f_mask;
    reg u256 qmod;
    reg u256 sixteen_bit_mask;

    reg u256[2] d256;
    reg u256[2] t256;
    reg u256[2] a256;
    reg u256[2] b256;
    reg u256[4] r256;
    reg u256[2] ord256;

    one_mask = one_mask_glob;
    f_mask = f_mask_glob;
    qmod = qmod_mask_glob;
    sixteen_bit_mask = sixteen_bit_mask_glob;

    for i = 0 to (SABER_N / 64) {
        t256[0] = buf[u256 2 * i];
        t256[1] = buf[u256 2 * i + 1];

        d256[0] = t256[0] & one_mask;
        
        tt256 = t256[0] >>8u32 1;
        tt256 &= one_mask;
        d256[0] +8u32= tt256;

        tt256 = t256[0] >>8u32 2;
        tt256 &= one_mask;
        d256[0] +8u32= tt256;

        tt256 = t256[0] >>8u32 3;
        tt256 &= one_mask;
        d256[0] +8u32= tt256;

        d256[1] = t256[1] & one_mask;
        
        tt256 = t256[1] >>8u32 1;
        tt256 &= one_mask;
        d256[1] +8u32= tt256;

        tt256 = t256[1] >>8u32 2;
        tt256 &= one_mask;
        d256[1] +8u32= tt256;

        tt256 = t256[1] >>8u32 3;
        tt256 &= one_mask;
        d256[1] +8u32= tt256;

        // a[0] - b[0] & Qmod
        a256[0] = d256[0] & f_mask;
        
        b256[0] = d256[0] >>8u32 4;
        b256[0] &= f_mask;

        a256[1] = d256[1] & f_mask;

        b256[1] = d256[1] >>8u32 4;
        b256[1] &= f_mask;

        t256[0] = a256[0] -8u32 b256[0]; // r[0]..r[12]r[16]..r[28] (32-bit)
        t256[1] = a256[1] -8u32 b256[1]; // r[32]..r[44]r[48]..r[60] (32-bit)
        
        t256[0] &= sixteen_bit_mask;
        t256[1] &= sixteen_bit_mask;
        t256[0] &= qmod;
        t256[1] &= qmod;

        r256[0] = #VPACKUS_8u32(t256[0], t256[1]); // r[0]..r[12]r[32]..r[44]r[16]..r[28]r[48]..r[60] (16-bit)

        // a[1] - b[1] & Qmod
        a256[0] = d256[0] >>8u32 8;
        a256[0] &= f_mask;
        
        b256[0] = d256[0] >>8u32 12;
        b256[0] &= f_mask;

        a256[1] = d256[1] >>8u32 8;
        a256[1] &= f_mask;

        b256[1] = d256[1] >>8u32 12;
        b256[1] &= f_mask;

        t256[0] = a256[0] -8u32 b256[0]; // r[1]..r[13]r[17]..r[29] (32-bit)
        t256[1] = a256[1] -8u32 b256[1]; // r[33]..r[45]r[49]..r[61] (32-bit)
        
        t256[0] &= sixteen_bit_mask;
        t256[1] &= sixteen_bit_mask;
        t256[0] &= qmod;
        t256[1] &= qmod;

        r256[1] = #VPACKUS_8u32(t256[0], t256[1]); // r[1]..r[13]r[33]..r[45]r[17]..r[29]r[49]..r[61] (16-bit)
        
        // a[2] - b[2] & Qmod
        a256[0] = d256[0] >>8u32 16;
        a256[0] &= f_mask;
        
        b256[0] = d256[0] >>8u32 20;
        b256[0] &= f_mask;

        a256[1] = d256[1] >>8u32 16;
        a256[1] &= f_mask;

        b256[1] = d256[1] >>8u32 20;
        b256[1] &= f_mask;

        t256[0] = a256[0] -8u32 b256[0]; // r[2]..r[14]r[18]..r[30] (32-bit)
        t256[1] = a256[1] -8u32 b256[1]; // r[34]..r[46]r[50]..r[62] (32-bit)
        
        t256[0] &= sixteen_bit_mask;
        t256[1] &= sixteen_bit_mask;
        t256[0] &= qmod;
        t256[1] &= qmod;

        r256[2] = #VPACKUS_8u32(t256[0], t256[1]); // r[2]..r[14]r[34]..r[46]r[18]..r[30]r[50]..r[62] (16-bit)
        
        // a[3] - b[3] & Qmod
        a256[0] = d256[0] >>8u32 24;
        a256[0] &= f_mask;
        
        b256[0] = d256[0] >>8u32 28;

        a256[1] = d256[1] >>8u32 24;
        a256[1] &= f_mask;

        b256[1] = d256[1] >>8u32 28;

        t256[0] = a256[0] -8u32 b256[0]; // r[2]..r[14]r[18]..r[30] (32-bit)
        t256[1] = a256[1] -8u32 b256[1]; // r[34]..r[46]r[50]..r[62] (32-bit)
        
        t256[0] &= sixteen_bit_mask;
        t256[1] &= sixteen_bit_mask;
        t256[0] &= qmod;
        t256[1] &= qmod;

        r256[3] = #VPACKUS_8u32(t256[0], t256[1]); // r[3]..r[15]r[35]..r[47]r[19]..r[31]r[51]..r[63] (16-bit)

        t256[0] = #VPUNPCKL_16u16(r256[0], r256[2]); // r[0]r[2]..r[12]r[14]..r[28]r[30] (16-bit)
        t256[1] = #VPUNPCKL_16u16(r256[1], r256[3]); // r[1]r[3]..r[13]r[15]..r[29]r[31] (16-bit)
        t256[0] = #VPERMQ(t256[0], 216); // r[0]..r[6]r[16]..r[22]r[8]..r[14]r[24]..r[30] (16-bit)
        t256[1] = #VPERMQ(t256[1], 216); // r[1]..r[7]r[17]..r[23]r[9]..r[15]r[25]..r[31] (16-bit)

        ord256[0] = #VPUNPCKL_16u16(t256[0], t256[1]); // r[0]r[1]..r[14]r[15] (16-bit)
        ord256[1] = #VPUNPCKH_16u16(t256[0], t256[1]); // r[16]r[17]..r[30]r[31] (16-bit)

        r[u256 4 * i] = ord256[0];
        r[u256 4 * i + 1] = ord256[1];

        t256[0] = #VPUNPCKH_16u16(r256[0], r256[2]); // r[32]r[34]..r[46]r[48]..r[60]r[62]
        t256[1] = #VPUNPCKH_16u16(r256[1], r256[3]); // r[33]r[35]..r[47]r[49]..r[61]r[63]
        t256[0] = #VPERMQ(t256[0], 216); // r[32]..r[38]r[48]..r[54]r[40]..r[46]r[56]..r[62] (16-bit)
        t256[1] = #VPERMQ(t256[1], 216); // r[33]..r[39]r[49]..r[55]r[41]..r[47]r[57]..r[63] (16-bit)

        ord256[0] = #VPUNPCKL_16u16(t256[0], t256[1]); // r[32]r[33]..r[46]r[47]
        ord256[1] = #VPUNPCKH_16u16(t256[0], t256[1]); // r[48]r[49]..r[62]r[63]

        r[u256 4 * i + 2] = ord256[0];
        r[u256 4 * i + 3] = ord256[1];
    }

	return r;
}

#endif