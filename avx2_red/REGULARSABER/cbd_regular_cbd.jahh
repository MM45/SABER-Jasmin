/*** cbd_regular_cbd.jahh: File containing the Jasmin implementation of cbd function from cbd.c, with (regular) SABER parameters ***/

#ifndef CBD_HH
#define CBD_HH

#include "SABER_params.jahh"

fn cbd(reg ptr u16[SABER_N] r, reg ptr u8[SABER_N] buf) -> reg ptr u16[SABER_N]
{
	reg u8 t8;

	//reg u16 t16;

	reg u32 t32;
	reg u32 d;
	reg u32 tt;

	stack u32[4] a;
	stack u32[4] b;

    reg u64 i;
    reg u64 address;

    i = 0;
	while (i < (SABER_N / 4)) {
        // load_littleendian
        address = i * 4;
        t32 = (32u) buf[(int) address];
        
        address += 1;
        tt = (32u) buf[(int) address];
        tt <<= 8;
        t32 |= tt;

        address += 1;
        tt = (32u) buf[(int) address];
        tt <<= 16;
        t32 |= tt;

        address += 1;
        tt = (32u) buf[(int) address];
        tt <<= 24;
        t32 |= tt;

		// d = 0; for(j=0;j<4;j++) d += (t >> j) & 0x11111111;
		tt = t32;
        tt &= 0x11111111;
		d = tt;

		tt = t32;
		tt >>= 1;
		tt &= 0x11111111;
		d += tt;

		tt = t32;
		tt >>= 2;
		tt &= 0x11111111;
		d += tt;

		tt = t32;
		tt >>= 3;
		tt &= 0x11111111;
		d += tt;

    	// a[0] =  d & 0xf;
    	t32 = d;
    	t32 &= 0xf;
		a[0] = t32;

    	// b[0] = (d >>  4) & 0xf;
    	t32 = d;
    	t32 >>= 4;
    	t32 & = 0xf;
    	b[0] = t32;

    	// a[1] = (d >>  8) & 0xf;
    	t32 = d;
    	t32 >>= 8;
    	t32 &= 0xf;
    	a[1] = t32;

    	// b[1] = (d >> 12) & 0xf;
    	t32 = d;
    	t32 >>= 12;
    	t32 &= 0xf;
    	b[1] = t32;

    	// a[2] = (d >> 16) & 0xf;
    	t32 = d;
    	t32 >>= 16;
    	t32 &= 0xf;
    	a[2] = t32;

    	// b[2] = (d >> 20) & 0xf;
		t32 = d;
    	t32 >>= 20;
    	t32 &= 0xf;
    	b[2] = t32;

    	// a[3] = (d >> 24) & 0xf;
    	t32 = d;
    	t32 >>= 24;
    	t32 &= 0xf;
    	a[3] = t32;
    	
    	// b[3] = (d >> 28);
    	t32 = d;
    	t32 >>= 28;
    	b[3] = t32;

    	// r[4*i+0] = (uint16_t)(a[0]  - b[0]) & Qmod_minus1;
    	t32 = a[0];
    	t32 -= b[0];
    	//t16 = (16u) t32;
    	t32 &= (SABER_Q - 1);
        address -= 3;
    	r[(int) address] = (16u) t32;

    	// r[4*i+1] = (uint16_t)(a[1]  - b[1]) & Qmod_minus1;
    	t32 = a[1];
    	t32 -= b[1];
        //t16 = (16u) t32;
        t32 &= (SABER_Q - 1);
        address += 1;
    	r[(int) address] = (16u) t32;

    	// r[4*i+2] = (uint16_t)(a[2]  - b[2]) & Qmod_minus1;
    	t32 = a[2];
    	t32 -= b[2];
        //t16 = (16u) t32;
        t32 &= (SABER_Q - 1);
        address += 1;
    	r[(int) address] = (16u) t32;

    	// r[4*i+3] = (uint16_t)(a[3]  - b[3]) & Qmod_minus1;
    	t32 = a[3];
    	t32 -= b[3];
        //t16 = (16u) t32;
        t32 &= (SABER_Q - 1);
        address += 1;
    	r[(int) address] = (16u) t32;

        i += 1;
	}

	return r;
}

#endif