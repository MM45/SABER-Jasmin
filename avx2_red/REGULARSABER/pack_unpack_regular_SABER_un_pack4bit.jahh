/*** pack_unpack_regular_SABER_un_pack4bit.jahh: File containing the Jasmin implementation of the SABER_un_pack4bit function from pack_unpack.c, with (regular) SABER parameters ***/

#ifndef SABER_UN_PACK4BIT_HH
#define SABER_UN_PACK4BIT_HH

#include "SABER_params.jahh"

u256 fourbit_mask_glob_256 = 0x000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f;

inline fn SABER_un_pack4bit(reg ptr u8[SABER_SCALEBYTES_KEM] bytes, reg ptr u16[SABER_N] ar) -> reg ptr u16[SABER_N]
{	
	inline int i;

	reg u128[2] b128;

	reg u256 fourbit_mask;
	reg u256[2] b256;
	reg u256[2] t256;
	reg u256[2] r256;

	fourbit_mask = fourbit_mask_glob_256;

	for i = 0 to SABER_N / 32 {
		b128[0] = bytes[u128 i]; // ar[0]ar[2]..ar[28]ar[30] (8-bit)
		b128[1] = bytes[u128 i]; // ar[1]ar[3]..ar[29]ar[31] (8-bit)

		b256[0] = #VPMOVZX_16u8_16u16(b128[0]); // ar[0]ar[2]..ar[28]ar[30] (16-bit)
		b256[1] = #VPMOVZX_16u8_16u16(b128[1]); // ar[1]ar[3]..ar[29]ar[31] (16-bit)

		b256[0] &= fourbit_mask;
		b256[1] >>16u16= 4;

		t256[0] = #VPUNPCKL_16u16(b256[0], b256[1]); // ar[0]ar[1]..a[7]a[16]..a[22]a[23] (16-bit)
		t256[1] = #VPUNPCKH_16u16(b256[0], b256[1]); // ar[8]ar[9]..a[15]a[24]..ar[30]ar[31] (16-bit)

		r256[0] = #VPERM2I128(t256[0], t256[1], (8u1) [0, 0, 1, 0, 0, 0, 0, 0]);
		r256[1] = #VPERM2I128(t256[0], t256[1], (8u1) [0, 0, 1, 1, 0, 0, 0, 1]);

		ar[u256 2 * i] = r256[0];
		ar[u256 2 * i + 1] = r256[1];
	}

	return ar;
}

#endif
