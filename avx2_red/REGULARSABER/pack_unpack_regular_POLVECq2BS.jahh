/*** pack_unpack_regular_POLVECq2BS.jahh: File containing the Jasmin implementation of the POLVECq2BS function from pack_unpack.c, with (regular) SABER parameters ***/

#ifndef POLVECQ2BS_HH
#define POLVECQ2BS_HH

#include "SABER_params.jahh"

inline fn POLVECq2BS(reg ptr u8[SABER_POLYVECBYTES] bytes, reg ptr u16[SABER_KN] data) -> reg ptr u8[SABER_POLYVECBYTES]
{
	//inline int i;
	//inline int j;

	reg u16 d1;
	reg u16 d2;

	reg u64 i;
	reg u64 j;
	reg u64 address_bytes;
	reg u64 address_data;

	i = 0;
	address_bytes = 0;
	address_data = 0;
	while (i < SABER_K) {
		j = 0;
		while (j < (SABER_N / 8)) {
			// bytes[offset_byte + 0]= ( data[i][ offset_data + 0 ] & (0xff));
			d1 = data[(int) address_data];
			d1 &= 0xff;
			bytes[(int) address_bytes] = (8u) d1;

			// bytes[offset_byte + 1]= ( (data[i][ offset_data + 0 ] >>8) & 0x1f ) | ((data[i][ offset_data + 1 ] & 0x07) << 5);
			d1 = data[(int) address_data];
			d1 >>= 8;
			d1 &= 0x1f;
			address_data += 1;
			d2 = data[(int) address_data];
			d2 &= 0x07;
			d2 <<= 5;
			d1 |= d2;
			address_bytes += 1;
			bytes[(int) address_bytes] = (8u) d1;

			// bytes[offset_byte + 2]= ( (data[i][ offset_data + 1 ] >>3) & 0xff );
			d1 = data[(int) address_data];
			d1 >>= 3;
			d1 &= 0xff;
			address_bytes += 1;
			bytes[(int) address_bytes] = (8u) d1;

			// bytes[offset_byte + 3]= ( (data[i][ offset_data + 1 ] >>11) & 0x03 ) | ((data[i][ offset_data + 2 ] & 0x3f) << 2);
			d1 = data[(int) address_data];
			d1 >>= 11;
			d1 &= 0x03;
			address_data += 1;
			d2 = data[(int) address_data];
			d2 &= 0x3f;
			d2 <<= 2;
			d1 |= d2;
			address_bytes += 1;
			bytes[(int) address_bytes] = (8u) d1;

			// bytes[offset_byte + 4]= ( (data[i][ offset_data + 2 ] >>6) & 0x7f ) | ( (data[i][ offset_data + 3 ] & 0x01) << 7 );
			d1 = data[(int) address_data];
			d1 >>= 6;
			d1 &= 0x7f;
			address_data += 1;
			d2 = data[(int) address_data];
			d2 &= 0x01;
			d2 <<= 7;
			d1 |= d2;
			address_bytes += 1;
			bytes[(int) address_bytes] = (8u) d1;

			// bytes[offset_byte + 5]= ( (data[i][ offset_data + 3 ] >>1) & 0xff );
			d1 = data[(int) address_data];
			d1 >>= 1;
			d1 &= 0xff;
			address_bytes += 1;
			bytes[(int) address_bytes] = (8u) d1;

			// bytes[offset_byte + 6]= ( (data[i][ offset_data + 3 ] >>9) & 0x0f ) | ( (data[i][ offset_data + 4 ] & 0x0f) << 4 );
			d1 = data[(int) address_data];
			d1 >>= 9;
			d1 &= 0x0f;
			address_data += 1;
			d2 = data[(int) address_data];
			d2 &= 0x0f;
			d2 <<= 4;
			d1 |= d2;
			address_bytes += 1;
			bytes[(int) address_bytes] = (8u) d1;

			// bytes[offset_byte + 7]= ( (data[i][ offset_data + 4] >>4) & 0xff );
			d1 = data[(int) address_data];
			d1 >>= 4;
			d1 &= 0xff;
			address_bytes += 1;
			bytes[(int) address_bytes] = (8u) d1;

			// bytes[offset_byte + 8]= ( (data[i][ offset_data + 4 ] >>12) & 0x01 ) | ( (data[i][ offset_data + 5 ] & 0x7f) << 1 );
			d1 = data[(int) address_data];
			d1 >>= 12;
			d1 &= 0x01;
			address_data += 1;
			d2 = data[(int) address_data];
			d2 &= 0x7f;
			d2 <<= 1;
			d1 |= d2;
			address_bytes += 1;
			bytes[(int) address_bytes] = (8u) d1;

			// bytes[offset_byte + 9]= ( (data[i][ offset_data + 5 ] >>7) & 0x3f ) | ( (data[i][ offset_data + 6 ] & 0x03) << 6 );
			d1 = data[(int) address_data];
			d1 >>= 7;
			d1 &= 0x3f;
			address_data += 1;
			d2 = data[(int) address_data];
			d2 &= 0x03;
			d2 <<= 6;
			d1 |= d2;
			address_bytes += 1;
			bytes[(int) address_bytes] = (8u) d1;

			// bytes[offset_byte + 10]= ( (data[i][ offset_data + 6 ] >>2) & 0xff );
			d1 = data[(int) address_data];
			d1 >>= 2;
			d1 &= 0xff;
			address_bytes += 1;
			bytes[(int) address_bytes] = (8u) d1;

			// bytes[offset_byte + 11]= ( (data[i][ offset_data + 6 ] >>10) & 0x07 ) | ( (data[i][ offset_data + 7 ] & 0x1f) << 3 );
			d1 = data[(int) address_data];
			d1 >>= 10;
			d1 &= 0x07;
			address_data += 1;
			d2 = data[(int) address_data];
			d2 &= 0x1f;
			d2 <<= 3;
			d1 |= d2;
			address_bytes += 1;
			bytes[(int) address_bytes] = (8u) d1;

			// bytes[offset_byte + 12]= ( (data[i][ offset_data + 7 ] >>5) & 0xff );
			d1 = data[(int) address_data];
			d1 >>= 5;
			d1 &= 0xff;
			address_bytes += 1;
			bytes[(int) address_bytes] = (8u) d1;

			j += 1;
			address_bytes += 1;
			address_data += 1;
		}
		i += 1;
	}

	return bytes;
}

#endif