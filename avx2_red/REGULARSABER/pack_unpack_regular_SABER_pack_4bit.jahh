/*** pack_unpack_regular_SABER_pack_4bit.jahh: File containing the Jasmin implementation of the SABER_pack_4bit function from pack_unpack.c, with (regular) SABER parameters ***/

#ifndef SABER_PACK_4BIT_HH
#define SABER_PACK_4BIT_HH

#include "SABER_params.jahh"

inline fn SABER_pack_4bit(reg ptr u8[SABER_SCALEBYTES_KEM] bytes, reg ptr u16[SABER_N] data) -> reg ptr u8[SABER_SCALEBYTES_KEM]
{
	reg u16 d1;
	reg u16 d2;

	reg u64 j;
	reg u64 address_data;

	j = 0;
	address_data = 0;
	while (j < (SABER_N / 2)) {
		// bytes[j]= (data[offset_data] & 0x0f) | ( (data[offset_data + 1] & 0x0f)<<4 );
		d1 = data[(int) address_data];
		d1 &= 0x0f;
		address_data += 1;
		d2 = data[(int) address_data];
		d2 &= 0x0f;
		d2 <<= 4;
		d1 |= d2;
		bytes[(int) j] = (8u) d1;

		j += 1;
		address_data += 1;
	}

	return bytes;
}

#endif
