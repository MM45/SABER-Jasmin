/*** poly_regular_GenSecret.jahh: File containing the Jasmin implementation of GenSecret function from poly.c, with (regular) SABER parameters ***/

#ifndef GENSECRET_HH
#define GENSECRET_HH

#include "SABER_params.jahh"
#include "fips202_regular_shake128_MUNK8_32.jahh"
#include "cbd_regular_cbd.jahh"

fn GenSecret(reg ptr u16[SABER_KN] r, reg ptr u8[SABER_COINBYTES] seed) -> reg ptr u16[SABER_KN]
{
	inline int i;
	inline int j;

	reg u8 t8;
	
	reg u16 t16;
	

	stack u8[MUNK8] buf;
	stack u8[SABER_N] tbuf;
	
	stack u16[SABER_N] tr;

	stack ptr u16[SABER_KN] sr;

	sr = r;
	
	buf = shake128_MUNK8_32(buf, seed);

	r = sr;

	for i = 0 to SABER_K {
		// fill tbuf with correct values
		for j = 0 to SABER_N {
			t8 = buf[i * SABER_MU * SABER_N / 8 + j];
			tbuf[j] = t8;
		}

		tr = cbd(tr, tbuf);

		
		// fill r with resulting values
		for j = 0 to SABER_N {
			t16 = tr[j];
			r[i * SABER_N + j] = t16;
		}
	}

	return r;
}


#endif