








param int CRYPTO_SECRETKEYBYTES = 2304;
param int CRYPTO_PUBLICKEYBYTES = (3 * 320 + 32);
param int CRYPTO_BYTES = 32;
param int CRYPTO_CIPHERTEXTBYTES = 1088;
param int Saber_type = 2;

param int SABER_K = 3;
param int SABER_MU = 8;
param int SABER_ET = 4;

param int SABER_EQ = 13;
param int SABER_EP = 10;

param int SABER_N = 256;
param int SABER_Q = 8192;
param int SABER_P = 1024;

param int SABER_SEEDBYTES = 32;
param int SABER_NOISESEEDBYTES = 32;
param int SABER_COINBYTES = 32;
param int SABER_KEYBYTES = 32;

param int SABER_HASHBYTES = 32;

param int SABER_POLYBYTES = 416;

param int SABER_POLYVECBYTES = (SABER_K * SABER_POLYBYTES);

param int SABER_POLYVECCOMPRESSEDBYTES = (SABER_K * 320);

param int SABER_CIPHERTEXTBYTES = (SABER_POLYVECCOMPRESSEDBYTES);



param int SABER_SCALEBYTES_KEM = (SABER_ET * SABER_N / 8);

param int SABER_INDCPA_PUBLICKEYBYTES = (SABER_POLYVECCOMPRESSEDBYTES + SABER_SEEDBYTES);
param int SABER_INDCPA_SECRETKEYBYTES = (SABER_POLYVECBYTES);

param int SABER_PUBLICKEYBYTES = (SABER_INDCPA_PUBLICKEYBYTES);

param int SABER_SECRETKEYBYTES = (SABER_INDCPA_SECRETKEYBYTES + SABER_INDCPA_PUBLICKEYBYTES + SABER_HASHBYTES + SABER_KEYBYTES);

param int SABER_BYTES_CCA_DEC = (SABER_POLYVECCOMPRESSEDBYTES + SABER_SCALEBYTES_KEM);



param int SABER_KN = (SABER_K * SABER_N);
param int SABER_KKN = (SABER_K * SABER_K * SABER_N);
param int N_SB = (SABER_N / 4);
param int N_SB_RES = (2 * N_SB - 1);

param int SHAKE128_RATE = 168;
param int SHAKE256_RATE = 136;
param int SHA3_256_RATE = 136;
param int SHA3_512_RATE = 72;

param int KK13N8 = (SABER_K * SABER_K * (13 * SABER_N / 8));
param int MUNK8 = (SABER_MU * SABER_N * SABER_K / 8);

param int h1 = 4;
param int h2 = 228;




u16 h1_u16 = h1;
u16 h2_u16 = h2;
u16 modp_u16 = SABER_P - 1;
u16 modq_u16 = SABER_Q - 1;

u128 zero_u128 = 0;
u256 zero_u256 = 0;
u256[6] rhotates_left = {0x0000000000000029000000000000002400000000000000120000000000000003,
                          0x000000000000001b000000000000001c000000000000003e0000000000000001,
                          0x000000000000002700000000000000380000000000000006000000000000002d,
                          0x00000000000000080000000000000037000000000000003d000000000000000a,
                          0x00000000000000140000000000000019000000000000000f0000000000000002,
                          0x000000000000000e0000000000000015000000000000002b000000000000002c};

u256[6] rhotates_right = {0x0000000000000017000000000000001c000000000000002e000000000000003d,
                          0x000000000000002500000000000000240000000000000002000000000000003f,
                          0x00000000000000190000000000000008000000000000003a0000000000000013,
                          0x0000000000000038000000000000000900000000000000030000000000000036,
                          0x000000000000002c00000000000000270000000000000031000000000000003e,
                          0x0000000000000032000000000000002b00000000000000150000000000000014};

u256[24] iotas = {0x0000000000000001000000000000000100000000000000010000000000000001,
                    0x0000000000008082000000000000808200000000000080820000000000008082,
                    0x800000000000808a800000000000808a800000000000808a800000000000808a,
                    0x8000000080008000800000008000800080000000800080008000000080008000,
                    0x000000000000808b000000000000808b000000000000808b000000000000808b,
                    0x0000000080000001000000008000000100000000800000010000000080000001,
                    0x8000000080008081800000008000808180000000800080818000000080008081,
                    0x8000000000008009800000000000800980000000000080098000000000008009,
                    0x000000000000008a000000000000008a000000000000008a000000000000008a,
                    0x0000000000000088000000000000008800000000000000880000000000000088,
                    0x0000000080008009000000008000800900000000800080090000000080008009,
                    0x000000008000000a000000008000000a000000008000000a000000008000000a,
                    0x000000008000808b000000008000808b000000008000808b000000008000808b,
                    0x800000000000008b800000000000008b800000000000008b800000000000008b,
                    0x8000000000008089800000000000808980000000000080898000000000008089,
                    0x8000000000008003800000000000800380000000000080038000000000008003,
                    0x8000000000008002800000000000800280000000000080028000000000008002,
                    0x8000000000000080800000000000008080000000000000808000000000000080,
                    0x000000000000800a000000000000800a000000000000800a000000000000800a,
                    0x800000008000000a800000008000000a800000008000000a800000008000000a,
                    0x8000000080008081800000008000808180000000800080818000000080008081,
                    0x8000000000008080800000000000808080000000000080808000000000008080,
                    0x0000000080000001000000008000000100000000800000010000000080000001,
                    0x8000000080008008800000008000800880000000800080088000000080008008};

fn KeccakF1600_StatePermute(reg ptr u256[7] state_reg_ptr) -> reg ptr u256[7]
{
  inline int i;

  reg u256[7] state;
  reg u256[9] t;
  reg u256 c00 c14 d00 d14;

  reg bool zf;

  reg u32 r;
  reg u32 index;

  state[0] = state_reg_ptr[0];
  state[1] = state_reg_ptr[1];
  state[2] = state_reg_ptr[2];
  state[3] = state_reg_ptr[3];
  state[4] = state_reg_ptr[4];
  state[5] = state_reg_ptr[5];
  state[6] = state_reg_ptr[6];

  for i = 0 to 24 {

    c00 = #VPSHUFD_256(state[2], (4u2)[1,0,3,2]);
    c14 = state[5] ^ state[3];
    t[2] = state[4] ^ state[6];
    c14 = c14 ^ state[1];
    c14 = c14 ^ t[2];
    t[4] = #VPERMQ(c14, (4u2)[2,1,0,3]);
    c00 = c00 ^ state[2];
    t[0] = #VPERMQ(c00, (4u2)[1,0,3,2]);
    t[1] = c14 >>4u64 63;
    t[2] = c14 +4u64 c14;
    t[1] = t[1] | t[2];
    d14 = #VPERMQ(t[1], (4u2)[0,3,2,1]);
    d00 = t[1] ^ t[4];
    d00 = #VPERMQ(d00, (4u2)[0,0,0,0]);
    c00 = c00 ^ state[0];
    c00 = c00 ^ t[0];
    t[0] = c00 >>4u64 63;
    t[1] = c00 +4u64 c00;
    t[1] = t[1] | t[0];
    state[2] = state[2] ^ d00;
    state[0] = state[0] ^ d00;
    d14 = #VPBLEND_8u32(d14, t[1], (8u1)[1,1,0,0,0,0,0,0]);
    t[4] = #VPBLEND_8u32(t[4], c00, (8u1)[0,0,0,0,0,0,1,1]);
    d14 = d14 ^ t[4];


    t[3] = #VPSLLV_4u64(state[2], rhotates_left[0] );
    state[2] = #VPSRLV_4u64(state[2], rhotates_right[0] );
    state[2] = state[2] | t[3];
    state[3] = state[3] ^ d14;
    t[4] = #VPSLLV_4u64(state[3], rhotates_left[2] );
    state[3] = #VPSRLV_4u64(state[3], rhotates_right[2] );
    state[3] = state[3] | t[4];
    state[4] = state[4] ^ d14;
    t[5] = #VPSLLV_4u64(state[4], rhotates_left[3] );
    state[4] = #VPSRLV_4u64(state[4], rhotates_right[3] );
    state[4] = state[4] | t[5];
    state[5] = state[5] ^ d14;
    t[6] = #VPSLLV_4u64(state[5], rhotates_left[4] );
    state[5] = #VPSRLV_4u64(state[5],rhotates_right[4] );
    state[5] = state[5] | t[6];
    state[6] = state[6] ^ d14;
    t[3] = #VPERMQ(state[2], (4u2)[2,0,3,1]);
    t[4] = #VPERMQ(state[3], (4u2)[2,0,3,1]);
    t[7] = #VPSLLV_4u64(state[6], rhotates_left[5] );
    t[1] = #VPSRLV_4u64(state[6], rhotates_right[5] );
    t[1] = t[1] | t[7];
    state[1] = state[1] ^ d14;
    t[5] = #VPERMQ(state[4], (4u2)[0,1,2,3]);
    t[6] = #VPERMQ(state[5], (4u2)[1,3,0,2]);
    t[8] = #VPSLLV_4u64(state[1], rhotates_left[1] );
    t[2] = #VPSRLV_4u64(state[1], rhotates_right[1] );
    t[2] = t[2] | t[8];


    t[7] = #VPSRLDQ_256(t[1], 8);
    t[0] = !t[1] & t[7];
    state[3] = #VPBLEND_8u32(t[2], t[6], (8u1)[0,0,0,0,1,1,0,0]);
    t[8] = #VPBLEND_8u32(t[4], t[2], (8u1)[0,0,0,0,1,1,0,0]);
    state[5] = #VPBLEND_8u32(t[3], t[4], (8u1)[0,0,0,0,1,1,0,0]);
    t[7] = #VPBLEND_8u32(t[2], t[3], (8u1)[0,0,0,0,1,1,0,0]);
    state[3] = #VPBLEND_8u32(state[3], t[4], (8u1)[0,0,1,1,0,0,0,0]);
    t[8] = #VPBLEND_8u32(t[8], t[5], (8u1)[0,0,1,1,0,0,0,0]);
    state[5] = #VPBLEND_8u32(state[5], t[2], (8u1)[0,0,1,1,0,0,0,0]);
    t[7] = #VPBLEND_8u32(t[7], t[6], (8u1)[0,0,1,1,0,0,0,0]);
    state[3] = #VPBLEND_8u32(state[3], t[5], (8u1)[1,1,0,0,0,0,0,0]);
    t[8] = #VPBLEND_8u32(t[8], t[6], (8u1)[1,1,0,0,0,0,0,0]);
    state[5] = #VPBLEND_8u32(state[5], t[6], (8u1)[1,1,0,0,0,0,0,0]);
    t[7] = #VPBLEND_8u32(t[7], t[4], (8u1)[1,1,0,0,0,0,0,0]);
    state[3] = !state[3] & t[8];
    state[5] = !state[5] & t[7];
    state[6] = #VPBLEND_8u32(t[5], t[2], (8u1)[0,0,0,0,1,1,0,0]);
    t[8] = #VPBLEND_8u32(t[3], t[5], (8u1)[0,0,0,0,1,1,0,0]);
    state[3] = state[3] ^ t[3];
    state[6] = #VPBLEND_8u32(state[6], t[3], (8u1)[0,0,1,1,0,0,0,0]);
    t[8] = #VPBLEND_8u32(t[8], t[4], (8u1)[0,0,1,1,0,0,0,0]);
    state[5] = state[5] ^ t[5];
    state[6] = #VPBLEND_8u32(state[6], t[4], (8u1)[1,1,0,0,0,0,0,0]);
    t[8] = #VPBLEND_8u32(t[8], t[2], (8u1)[1,1,0,0,0,0,0,0]);
    state[6] = !state[6] & t[8];
    state[6] = state[6] ^ t[6];
    state[4] = #VPERMQ(t[1], (4u2)[0,1,3,2]);
    t[8] = #VPBLEND_8u32(state[4], state[0], (8u1)[0,0,1,1,0,0,0,0]);
    state[1] = #VPERMQ(t[1], (4u2)[0,3,2,1]);
    state[1] = #VPBLEND_8u32(state[1], state[0], (8u1)[1,1,0,0,0,0,0,0]);
    state[1] = !state[1] & t[8];
    state[2] = #VPBLEND_8u32(t[4], t[5], (8u1)[0,0,0,0,1,1,0,0]);
    t[7] = #VPBLEND_8u32(t[6], t[4], (8u1)[0,0,0,0,1,1,0,0]);
    state[2] = #VPBLEND_8u32(state[2], t[6], (8u1)[0,0,1,1,0,0,0,0]);
    t[7] = #VPBLEND_8u32(t[7], t[3], (8u1)[0,0,1,1,0,0,0,0]);
    state[2] = #VPBLEND_8u32(state[2], t[3], (8u1)[1,1,0,0,0,0,0,0]);
    t[7] = #VPBLEND_8u32(t[7], t[5], (8u1)[1,1,0,0,0,0,0,0]);
    state[2] = !state[2] & t[7];
    state[2] = state[2] ^ t[2];
    t[0] = #VPERMQ(t[0], (4u2)[0,0,0,0]);
    state[3] = #VPERMQ(state[3], (4u2)[0,1,2,3]);
    state[5] = #VPERMQ(state[5], (4u2)[2,0,3,1]);
    state[6] = #VPERMQ(state[6], (4u2)[1,3,0,2]);
    state[4] = #VPBLEND_8u32(t[6], t[3], (8u1)[0,0,0,0,1,1,0,0]);
    t[7] = #VPBLEND_8u32(t[5], t[6], (8u1)[0,0,0,0,1,1,0,0]);
    state[4] = #VPBLEND_8u32(state[4], t[5], (8u1)[0,0,1,1,0,0,0,0]);
    t[7] = #VPBLEND_8u32(t[7], t[2], (8u1)[0,0,1,1,0,0,0,0]);
    state[4] = #VPBLEND_8u32(state[4], t[2], (8u1)[1,1,0,0,0,0,0,0]);
    t[7] = #VPBLEND_8u32(t[7], t[3], (8u1)[1,1,0,0,0,0,0,0]);
    state[4] = !state[4] & t[7];
    state[0] = state[0] ^ t[0];
    state[1] = state[1] ^ t[1];
    state[4] = state[4] ^ t[4];


    state[0] = state[0] ^ iotas[i];

  }

  state_reg_ptr[0] = state[0];
  state_reg_ptr[1] = state[1];
  state_reg_ptr[2] = state[2];
  state_reg_ptr[3] = state[3];
  state_reg_ptr[4] = state[4];
  state_reg_ptr[5] = state[5];
  state_reg_ptr[6] = state[6];

  return state_reg_ptr;
}











inline fn load_4u64(stack u64[4] buf) -> reg u256
{
 inline int i;

 reg u128 x;
 reg u128 y;

 reg u256 r;

 x = zero_u128;
 y = zero_u128;
 r = zero_u256;

 for i = 0 to 2 {
  x = #VPINSR_2u64(x, buf[i], i);
  y = #VPINSR_2u64(y, buf[2 + i], i);
 }

 r = #VINSERTI128(r, x, 0);
 r = #VINSERTI128(r, y, 1);

 return r;
}
u64[24] rhotates_left = {
          3, 18, 36, 41,
          1, 62, 28, 27,
          45, 6, 56, 39,
          10, 61, 55, 8,
          2, 15, 25, 20,
          44, 43, 21, 14};

u64[24] rhotates_right = {
          64-3, 64-18, 64-36, 64-41,
          64-1, 64-62, 64-28, 64-27,
          64-45, 64-6, 64-56, 64-39,
          64-10, 64-61, 64-55, 64-8,
          64-2, 64-15, 64-25, 64-20,
          64-44, 64-43, 64-21, 64-14};

u64[96] iotas = {0x0000000000000001, 0x0000000000000001, 0x0000000000000001, 0x0000000000000001,
        0x0000000000008082, 0x0000000000008082, 0x0000000000008082, 0x0000000000008082,
        0x800000000000808a, 0x800000000000808a, 0x800000000000808a, 0x800000000000808a,
        0x8000000080008000, 0x8000000080008000, 0x8000000080008000, 0x8000000080008000,
        0x000000000000808b, 0x000000000000808b, 0x000000000000808b, 0x000000000000808b,
        0x0000000080000001, 0x0000000080000001, 0x0000000080000001, 0x0000000080000001,
        0x8000000080008081, 0x8000000080008081, 0x8000000080008081, 0x8000000080008081,
        0x8000000000008009, 0x8000000000008009, 0x8000000000008009, 0x8000000000008009,
        0x000000000000008a, 0x000000000000008a, 0x000000000000008a, 0x000000000000008a,
        0x0000000000000088, 0x0000000000000088, 0x0000000000000088, 0x0000000000000088,
        0x0000000080008009, 0x0000000080008009, 0x0000000080008009, 0x0000000080008009,
        0x000000008000000a, 0x000000008000000a, 0x000000008000000a, 0x000000008000000a,
        0x000000008000808b, 0x000000008000808b, 0x000000008000808b, 0x000000008000808b,
        0x800000000000008b, 0x800000000000008b, 0x800000000000008b, 0x800000000000008b,
        0x8000000000008089, 0x8000000000008089, 0x8000000000008089, 0x8000000000008089,
        0x8000000000008003, 0x8000000000008003, 0x8000000000008003, 0x8000000000008003,
        0x8000000000008002, 0x8000000000008002, 0x8000000000008002, 0x8000000000008002,
        0x8000000000000080, 0x8000000000000080, 0x8000000000000080, 0x8000000000000080,
        0x000000000000800a, 0x000000000000800a, 0x000000000000800a, 0x000000000000800a,
        0x800000008000000a, 0x800000008000000a, 0x800000008000000a, 0x800000008000000a,
        0x8000000080008081, 0x8000000080008081, 0x8000000080008081, 0x8000000080008081,
        0x8000000000008080, 0x8000000000008080, 0x8000000000008080, 0x8000000000008080,
        0x0000000080000001, 0x0000000080000001, 0x0000000080000001, 0x0000000080000001,
        0x8000000080008008, 0x8000000080008008, 0x8000000080008008, 0x8000000080008008};


fn KeccakF1600_StatePermute_debug(reg ptr u256[7] state_reg_ptr) -> reg ptr u256[7]
{
  inline int i;

  reg u256[7] state;
  reg u256[9] t;
  reg u256 c00 c14 d00 d14;
  reg u256 t256;

  reg bool zf;

  reg u32 r;
  reg u32 index;

  state[0] = state_reg_ptr[0];
  state[1] = state_reg_ptr[1];
  state[2] = state_reg_ptr[2];
  state[3] = state_reg_ptr[3];
  state[4] = state_reg_ptr[4];
  state[5] = state_reg_ptr[5];
  state[6] = state_reg_ptr[6];

  r = 24;



  for i = 0 to 24 {

    c00 = #VPSHUFD_256(state[2], (4u2)[1,0,3,2]);
    c14 = state[5] ^ state[3];
    t[2] = state[4] ^ state[6];
    c14 = c14 ^ state[1];
    c14 = c14 ^ t[2];
    t[4] = #VPERMQ(c14, (4u2)[2,1,0,3]);
    c00 = c00 ^ state[2];
    t[0] = #VPERMQ(c00, (4u2)[1,0,3,2]);
    t[1] = c14 >>4u64 63;
    t[2] = c14 +4u64 c14;
    t[1] = t[1] | t[2];
    d14 = #VPERMQ(t[1], (4u2)[0,3,2,1]);
    d00 = t[1] ^ t[4];
    d00 = #VPERMQ(d00, (4u2)[0,0,0,0]);
    c00 = c00 ^ state[0];
    c00 = c00 ^ t[0];
    t[0] = c00 >>4u64 63;
    t[1] = c00 +4u64 c00;
    t[1] = t[1] | t[0];
    state[2] = state[2] ^ d00;
    state[0] = state[0] ^ d00;
    d14 = #VPBLEND_8u32(d14, t[1], (8u1)[1,1,0,0,0,0,0,0]);
    t[4] = #VPBLEND_8u32(t[4], c00, (8u1)[0,0,0,0,0,0,1,1]);
    d14 = d14 ^ t[4];


    t256 = load_4u64(rhotates_left[0:4]);
    t[3] = #VPSLLV_4u64(state[2], t256 );
    t256 = load_4u64(rhotates_right[0:4]);
    state[2] = #VPSRLV_4u64(state[2], t256 );
    state[2] = state[2] | t[3];
    state[3] = state[3] ^ d14;

    t256 = load_4u64(rhotates_left[2 * 4:4]);
    t[4] = #VPSLLV_4u64(state[3], t256 );
    t256 = load_4u64(rhotates_right[2 * 4:4]);
    state[3] = #VPSRLV_4u64(state[3], t256 );
    state[3] = state[3] | t[4];
    state[4] = state[4] ^ d14;

    t256 = load_4u64(rhotates_left[3 * 4:4]);
    t[5] = #VPSLLV_4u64(state[4], t256 );
    t256 = load_4u64(rhotates_right[3 * 4:4]);
    state[4] = #VPSRLV_4u64(state[4], t256 );
    state[4] = state[4] | t[5];
    state[5] = state[5] ^ d14;

    t256 = load_4u64(rhotates_left[4 * 4:4]);
    t[6] = #VPSLLV_4u64(state[5], t256 );
    t256 = load_4u64(rhotates_right[4 * 4:4]);
    state[5] = #VPSRLV_4u64(state[5], t256 );
    state[5] = state[5] | t[6];
    state[6] = state[6] ^ d14;
    t[3] = #VPERMQ(state[2], (4u2)[2,0,3,1]);
    t[4] = #VPERMQ(state[3], (4u2)[2,0,3,1]);

    t256 = load_4u64(rhotates_left[5 * 4:4]);
    t[7] = #VPSLLV_4u64(state[6], t256 );
    t256 = load_4u64(rhotates_right[5 * 4:4]);
    t[1] = #VPSRLV_4u64(state[6], t256 );
    t[1] = t[1] | t[7];
    state[1] = state[1] ^ d14;
    t[5] = #VPERMQ(state[4], (4u2)[0,1,2,3]);
    t[6] = #VPERMQ(state[5], (4u2)[1,3,0,2]);
    t256 = load_4u64(rhotates_left[1 * 4:4]);
    t[8] = #VPSLLV_4u64(state[1], t256 );
    t256 = load_4u64(rhotates_right[1 * 4:4]);
    t[2] = #VPSRLV_4u64(state[1], t256 );
    t[2] = t[2] | t[8];


    t[7] = #VPSRLDQ_256(t[1], 8);
    t[0] = !t[1] & t[7];
    state[3] = #VPBLEND_8u32(t[2], t[6], (8u1)[0,0,0,0,1,1,0,0]);
    t[8] = #VPBLEND_8u32(t[4], t[2], (8u1)[0,0,0,0,1,1,0,0]);
    state[5] = #VPBLEND_8u32(t[3], t[4], (8u1)[0,0,0,0,1,1,0,0]);
    t[7] = #VPBLEND_8u32(t[2], t[3], (8u1)[0,0,0,0,1,1,0,0]);
    state[3] = #VPBLEND_8u32(state[3], t[4], (8u1)[0,0,1,1,0,0,0,0]);
    t[8] = #VPBLEND_8u32(t[8], t[5], (8u1)[0,0,1,1,0,0,0,0]);
    state[5] = #VPBLEND_8u32(state[5], t[2], (8u1)[0,0,1,1,0,0,0,0]);
    t[7] = #VPBLEND_8u32(t[7], t[6], (8u1)[0,0,1,1,0,0,0,0]);
    state[3] = #VPBLEND_8u32(state[3], t[5], (8u1)[1,1,0,0,0,0,0,0]);
    t[8] = #VPBLEND_8u32(t[8], t[6], (8u1)[1,1,0,0,0,0,0,0]);
    state[5] = #VPBLEND_8u32(state[5], t[6], (8u1)[1,1,0,0,0,0,0,0]);
    t[7] = #VPBLEND_8u32(t[7], t[4], (8u1)[1,1,0,0,0,0,0,0]);
    state[3] = !state[3] & t[8];
    state[5] = !state[5] & t[7];
    state[6] = #VPBLEND_8u32(t[5], t[2], (8u1)[0,0,0,0,1,1,0,0]);
    t[8] = #VPBLEND_8u32(t[3], t[5], (8u1)[0,0,0,0,1,1,0,0]);
    state[3] = state[3] ^ t[3];
    state[6] = #VPBLEND_8u32(state[6], t[3], (8u1)[0,0,1,1,0,0,0,0]);
    t[8] = #VPBLEND_8u32(t[8], t[4], (8u1)[0,0,1,1,0,0,0,0]);
    state[5] = state[5] ^ t[5];
    state[6] = #VPBLEND_8u32(state[6], t[4], (8u1)[1,1,0,0,0,0,0,0]);
    t[8] = #VPBLEND_8u32(t[8], t[2], (8u1)[1,1,0,0,0,0,0,0]);
    state[6] = !state[6] & t[8];
    state[6] = state[6] ^ t[6];
    state[4] = #VPERMQ(t[1], (4u2)[0,1,3,2]);
    t[8] = #VPBLEND_8u32(state[4], state[0], (8u1)[0,0,1,1,0,0,0,0]);
    state[1] = #VPERMQ(t[1], (4u2)[0,3,2,1]);
    state[1] = #VPBLEND_8u32(state[1], state[0], (8u1)[1,1,0,0,0,0,0,0]);
    state[1] = !state[1] & t[8];
    state[2] = #VPBLEND_8u32(t[4], t[5], (8u1)[0,0,0,0,1,1,0,0]);
    t[7] = #VPBLEND_8u32(t[6], t[4], (8u1)[0,0,0,0,1,1,0,0]);
    state[2] = #VPBLEND_8u32(state[2], t[6], (8u1)[0,0,1,1,0,0,0,0]);
    t[7] = #VPBLEND_8u32(t[7], t[3], (8u1)[0,0,1,1,0,0,0,0]);
    state[2] = #VPBLEND_8u32(state[2], t[3], (8u1)[1,1,0,0,0,0,0,0]);
    t[7] = #VPBLEND_8u32(t[7], t[5], (8u1)[1,1,0,0,0,0,0,0]);
    state[2] = !state[2] & t[7];
    state[2] = state[2] ^ t[2];
    t[0] = #VPERMQ(t[0], (4u2)[0,0,0,0]);
    state[3] = #VPERMQ(state[3], (4u2)[0,1,2,3]);
    state[5] = #VPERMQ(state[5], (4u2)[2,0,3,1]);
    state[6] = #VPERMQ(state[6], (4u2)[1,3,0,2]);
    state[4] = #VPBLEND_8u32(t[6], t[3], (8u1)[0,0,0,0,1,1,0,0]);
    t[7] = #VPBLEND_8u32(t[5], t[6], (8u1)[0,0,0,0,1,1,0,0]);
    state[4] = #VPBLEND_8u32(state[4], t[5], (8u1)[0,0,1,1,0,0,0,0]);
    t[7] = #VPBLEND_8u32(t[7], t[2], (8u1)[0,0,1,1,0,0,0,0]);
    state[4] = #VPBLEND_8u32(state[4], t[2], (8u1)[1,1,0,0,0,0,0,0]);
    t[7] = #VPBLEND_8u32(t[7], t[3], (8u1)[1,1,0,0,0,0,0,0]);
    state[4] = !state[4] & t[7];
    state[0] = state[0] ^ t[0];
    state[1] = state[1] ^ t[1];
    state[4] = state[4] ^ t[4];


    t256 = load_4u64(iotas[i * 4:4]);
    state[0] = state[0] ^ t256;

  }




  state_reg_ptr[0] = state[0];
  state_reg_ptr[1] = state[1];
  state_reg_ptr[2] = state[2];
  state_reg_ptr[3] = state[3];
  state_reg_ptr[4] = state[4];
  state_reg_ptr[5] = state[5];
  state_reg_ptr[6] = state[6];

  return state_reg_ptr;
}
export fn KeccakF1600_StatePermute_jazz(reg u64 statep)
{
 inline int i;

 reg u256 t;

 stack u256[7] state;

 for i = 0 to 7 {
  t = (u256) [statep + 32 * i];
  state[i] = t;
 }

 state = KeccakF1600_StatePermute(state);

 for i = 0 to 7 {
  t = state[i];
  (u256) [statep + 32 * i] = t;
 }
}

export fn KeccakF1600_StatePermute_debug_jazz(reg u64 statep)
{
 inline int i;

 reg u256 t;

 stack u256[7] state;

 for i = 0 to 7 {
  t = (u256) [statep + 32 * i];
  state[i] = t;
 }

 state = KeccakF1600_StatePermute_debug(state);

 for i = 0 to 7 {
  t = state[i];
  (u256) [statep + 32 * i] = t;
 }
}
