/*** fips202_regular_sha3_256_PUBKEYBYTES.jahh: File containing the Jasmin implementation of sha3_256 function from fips202.c, where inlen == SABER_INDCPA_PUBLICKEYBYTES and with (regular) SABER parameters ***/

#ifndef SHA3_256_PUBKEYBYTES_HH
#define SHA3_256_PUBKEYBYTES_HH

#include "SABER_params.jahh"
#include "fips202_regular_KeccakF1600_StatePermute.jahh"
#include "fips202_regular_keccak_absorb_256_single.jahh"

fn sha3_256_PUBKEYBYTES(reg ptr u8[32] output, reg ptr u8[SABER_INDCPA_PUBLICKEYBYTES] input) -> reg ptr u8[32]
{
	inline int i;
	inline int nblocks;

	reg u64 t64;

	reg u256 t256;

	stack u64[25] s;

	nblocks = 7; // SABER_INDCPA_PUBLICKEYBYTES / SHA3_256_RATE;

	t256 = zero_u256;
	
	for i = 0 to 6 {
		s[u256 i] = t256;
	}
	s[24] = 0;

	// s = keccak_absorb_256_PUBKEYBYTES(s, input);
	for i = 0 to nblocks {
		s = keccak_absorb_256_single(s, input[i * SHA3_256_RATE:SHA3_256_RATE]);
	}

	for i = 0 to 5 {
		t64 = input[u64 119 + i];
		s[u64 i] ^= t64; 
	}

	s[u8 40] ^= 0x06;
	s[u8 SHA3_256_RATE - 1] ^= 0x80;

	s = KeccakF1600_StatePermute(s);

	t256 = s[u256 0];
	output[u256 0] = t256;

	return output;
}

#endif