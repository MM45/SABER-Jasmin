/*** polyvec_ntt_regular_polyvec_basemul_acc_montgomery.jahh: File containing the Jasmin implementation of polyvec_basemul_acc_montgomery function from pointwise.S, with pdata == PDATA0 (polyvec_basemul_acc_montgomery_0) and pdata = PDATA1 (polyvec_basemul_acc_montgomery_1) and (regular) SABER parameters ***/

#ifndef POLYVEC_BASEMUL_ACC_MONTGOMERY_HH
#define POLYVEC_BASEMUL_ACC_MONTGOMERY_HH

#include "SABER_params.jahh"
#include "consts256.jahh"
#include "fq_regular_fqmulprecomp.jahh"

inline fn pointwise32(reg ptr u16[SABER_N] r, reg ptr u16[SABER_KN] a, reg ptr u16[SABER_KN] b, reg ptr u16[864] pdata, inline int off, reg u256 ymm0, reg u256 ymm1) -> reg ptr u16[SABER_N]
{
	reg u256 ymm3, ymm4, ymm5, ymm6, ymm7, ymm8, ymm9, ymm10, ymm11, ymm12, ymm13, ymm14, ymm15;

	ymm4 = a[u256 (0 + 32 * off + 0) * 2 / 32];
	ymm5 = b[u256 (0 + 32 * off + 0) * 2 / 32];

	ymm6 = a[u256 (0 + 32 * off + 16) * 2 / 32];
	ymm7 = b[u256 (0 + 32 * off + 16) * 2 / 32];

	ymm8 = a[u256 (256 + 32 * off + 0) * 2 / 32];
	ymm9 = b[u256 (256 + 32 * off + 0) * 2 / 32];

	ymm3 = #VPMULL_16u16(ymm4, ymm5);
	ymm4 = #VPMULH_16u16(ymm4, ymm5);

	ymm10 = a[u256 (256 + 32 * off + 16) * 2 / 32];
	ymm11 = b[u256 (256 + 32 * off + 16) * 2 / 32];

	ymm5 = #VPMULL_16u16(ymm6, ymm7);
	ymm6 = #VPMULH_16u16(ymm6, ymm7);

	ymm12 = a[u256 (512 + 32 * off + 0) * 2 / 32];
	ymm13 = b[u256 (512 + 32 * off + 0) * 2 / 32];

	ymm7 = #VPMULL_16u16(ymm8, ymm9);
	ymm8 = #VPMULH_16u16(ymm8, ymm9);

	ymm14 = a[u256 (512 + 32 * off + 16) * 2 / 32];
	ymm15 = b[u256 (512 + 32 * off + 16) * 2 / 32];

	ymm9 = #VPMULL_16u16(ymm10, ymm11);
	ymm10 = #VPMULH_16u16(ymm10, ymm11);

	ymm11 = #VPMULL_16u16(ymm12, ymm13);
	ymm12 = #VPMULH_16u16(ymm12, ymm13);

	ymm13 = #VPMULL_16u16(ymm14, ymm15);
	ymm14 = #VPMULH_16u16(ymm14, ymm15);

	ymm3 = #VPMULL_16u16(ymm3, ymm1);
	ymm5 = #VPMULL_16u16(ymm5, ymm1);
	ymm7 = #VPMULL_16u16(ymm7, ymm1);
	ymm9 = #VPMULL_16u16(ymm9, ymm1);
	ymm11 = #VPMULL_16u16(ymm11, ymm1);
	ymm13 = #VPMULL_16u16(ymm13, ymm1);

	ymm3 = #VPMULH_16u16(ymm3, ymm0);
	ymm5 = #VPMULH_16u16(ymm5, ymm0);
	ymm7 = #VPMULH_16u16(ymm7, ymm0);
	ymm9 = #VPMULH_16u16(ymm9, ymm0);
	ymm11 = #VPMULH_16u16(ymm11, ymm0);
	ymm13 = #VPMULH_16u16(ymm13, ymm0);

	ymm4 +16u16= ymm8;
	ymm6 +16u16= ymm10;
	ymm4 +16u16= ymm12;
	ymm6 +16u16= ymm14;

	ymm3 = ymm4 -16u16 ymm3;
	ymm4 = ymm6 -16u16 ymm5;
	ymm3 = ymm3 -16u16 ymm7;
	ymm4 = ymm4 -16u16 ymm9;
	ymm3 = ymm3 -16u16 ymm11;
	ymm4 = ymm4 -16u16 ymm13;

	// red16		3,rs=_16XSHIFT*2
	//ymm3, ymm12 = red16_1(ymm3, _16XSHIFT * 2, ymm12, ymm0, ymm2, pdata);

	// red16		5,rs=_16XSHIFT*2
	//ymm5, ymm12 = red16_1(ymm5, _16XSHIFT * 2, ymm12, ymm0, ymm2, pdata);
	
	ymm14 = pdata[u256 _16XF_PINV * 2 / 32];
	ymm15 = pdata[u256 _16XF * 2 / 32];

	// fqmulprecomp		14,15,3,x=5
	ymm3, ymm5 = fqmulprecomp_0(ymm14, ymm15, ymm3, ymm5, ymm0);

	// fqmulprecomp		14,15,4,x=5
	ymm4, ymm5 = fqmulprecomp_0(ymm14, ymm15, ymm4, ymm5, ymm0);

	r[u256 (32 * off + 0) * 2 / 32] = ymm3;
	r[u256 (32 * off + 16) * 2 / 32] = ymm4;

	return r;
}

fn polyvec_basemul_acc_montgomery_0(reg ptr u16[SABER_N] r, reg ptr u16[SABER_KN] a, reg ptr u16[SABER_KN] b) -> reg ptr u16[SABER_N]
{
	reg u256 ymm0, ymm1, ymm2;

	ymm0 = PDATA0[u256 _16XP * 2 / 32];
	ymm1 = PDATA0[u256 _16XPINV * 2 / 32];

	r = pointwise32(r, a, b, PDATA0, 0, ymm0, ymm1);
	r = pointwise32(r, a, b, PDATA0, 1, ymm0, ymm1);
	r = pointwise32(r, a, b, PDATA0, 2, ymm0, ymm1);
	r = pointwise32(r, a, b, PDATA0, 3, ymm0, ymm1);
	r = pointwise32(r, a, b, PDATA0, 4, ymm0, ymm1);
	r = pointwise32(r, a, b, PDATA0, 5, ymm0, ymm1);
	r = pointwise32(r, a, b, PDATA0, 6, ymm0, ymm1);
	r = pointwise32(r, a, b, PDATA0, 7, ymm0, ymm1);

	return r;
}

fn polyvec_basemul_acc_montgomery_1(reg ptr u16[SABER_N] r, reg ptr u16[SABER_KN] a, reg ptr u16[SABER_KN] b) -> reg ptr u16[SABER_N]
{
	reg u256 ymm0, ymm1, ymm2;

	ymm0 = PDATA1[u256 _16XP * 2 / 32];
	ymm1 = PDATA1[u256 _16XPINV * 2 / 32];

	r = pointwise32(r, a, b, PDATA1, 0, ymm0, ymm1);
	r = pointwise32(r, a, b, PDATA1, 1, ymm0, ymm1);
	r = pointwise32(r, a, b, PDATA1, 2, ymm0, ymm1);
	r = pointwise32(r, a, b, PDATA1, 3, ymm0, ymm1);
	r = pointwise32(r, a, b, PDATA1, 4, ymm0, ymm1);
	r = pointwise32(r, a, b, PDATA1, 5, ymm0, ymm1);
	r = pointwise32(r, a, b, PDATA1, 6, ymm0, ymm1);
	r = pointwise32(r, a, b, PDATA1, 7, ymm0, ymm1);

	return r;
}

#endif