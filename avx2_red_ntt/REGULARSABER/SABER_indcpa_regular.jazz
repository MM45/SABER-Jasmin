/*** SABER_indcpa_regular.jazz: File containing the Jasmin wrappers of the functions in the SABER_indcpa_regular_*.jahh files, only used for testing ***/

#include "SABER_params.jahh"
#include "SABER_indcpa_regular_POL2MSG.jahh"
#include "SABER_indcpa_regular_GenMatrix.jahh"
#include "SABER_indcpa_regular_indcpa_kem_keypair_randominc.jahh"
#include "SABER_indcpa_regular_indcpa_kem_enc.jahh"
#include "SABER_indcpa_regular_indcpa_kem_dec.jahh"
#include "SABER_indcpa_regular_GenSecret.jahh"
#include "SABER_indcpa_regular_BS2POLq.jahh"


export fn BS2POLq_jazz(reg u64 bytesp, reg u64 datap)
{
	inline int i;

	reg u256 t256;

	stack u8[SABER_POLYBYTES] bytes;
	stack u16[SABER_N] data;

	for i = 0 to SABER_POLYBYTES / 32 {
		t256 = (u256) [bytesp + 32 * i];
		bytes[u256 i] = t256;
	}

	data = BS2POLq(bytes, data);

	for i = 0 to SABER_N / 16 {
		t256 = data[u256 i];
		(u256) [datap + 32 * i] = t256;
	}

}

export fn GenSecret_jazz(reg u64 rp, reg u64 seedp) 
{
	inline int i;

	reg u256 t256;

	stack u8[SABER_COINBYTES] seed;

	stack u16[SABER_KN] r;

	stack u64 srp;

	for i = 0 to SABER_COINBYTES / 32 {
		t256 = (u256) [seedp + 32 * i];
		seed[u256 i] = t256;
	}

	srp = rp;

	r = GenSecret(r, seed);

	rp = srp;
	
	for i = 0 to SABER_KN / 16 {
		t256 = r[u256 i];
		(u256) [rp + 32 * i] = t256;
	}

}

export fn POL2MSG_jazz(reg u64 message_dec_unpackedp, reg u64 message_decp) 
{
	inline int i;

	reg u256 t256;

	stack u8[SABER_KEYBYTES] message_dec;
	stack u16[SABER_N] message_dec_unpacked;

	for i = 0 to SABER_N / 16 {
		t256 = (u256) [message_dec_unpackedp + 32 * i];
		message_dec_unpacked[u256 i] = t256;
	}

	message_dec = POL2MSG(message_dec_unpacked, message_dec);

	for i = 0 to SABER_KEYBYTES / 32 {
		t256 = message_dec[u256 i];
		(u256) [message_decp + 32 * i] = t256;
	}

}

export fn GenMatrix_jazz(reg u64 ap, reg u64 seedp)
{
	inline int i;

	reg u256 t256;

	stack u8[SABER_SEEDBYTES] seed;

	stack u16[SABER_KKN] a;

	stack u64 sap;

	for i = 0 to SABER_SEEDBYTES / 32 {
		t256 = (u256) [seedp + 32 * i];
		seed[u256 i] = t256;
	}

	sap = ap;

	a = GenMatrix(a, seed);

	ap = sap;
	
	for i = 0 to SABER_KKN / 16 {
		t256 = a[u256 i];
		(u256) [ap + 32 * i] = t256;
	}
}


export fn indcpa_kem_keypair_randominc_jazz(reg u64 pkp, reg u64 skp, reg u64 seedp, reg u64 noiseseedp)
{
	inline int i;

	reg u256 t256;

	stack u8[SABER_INDCPA_PUBLICKEYBYTES] pk;
	stack u8[SABER_INDCPA_SECRETKEYBYTES] sk;
	stack u8[SABER_SEEDBYTES] seed;
	stack u8[SABER_COINBYTES] noiseseed;

	stack u64 spkp;
	stack u64 sskp;

	for i = 0 to SABER_SEEDBYTES / 32 {
		t256 = (u256) [seedp + 32 * i];
		seed[u256 i] = t256;
	}

	for i = 0 to SABER_COINBYTES / 32 {
		t256 = (u256) [noiseseedp + 32 * i];
		noiseseed[u256 i] = t256;
	}

	spkp = pkp;
	sskp = skp;

	pk, sk = indcpa_kem_keypair_randominc(pk, sk, seed, noiseseed);

	pkp = spkp;
	skp = sskp;

	for i = 0 to SABER_INDCPA_PUBLICKEYBYTES / 32 {
		t256 = pk[u256 i];
		(u256) [pkp + 32 * i] = t256;
	}

	for i = 0 to SABER_INDCPA_SECRETKEYBYTES / 32 {
		t256 = sk[u256 i];
		(u256) [skp + 32 * i] = t256;
	}
}

export fn indcpa_kem_enc_jazz(reg u64 message_receivedp, reg u64 noiseseedp, reg u64 pkp, reg u64 ciphertextp)
{
	inline int i;

	reg u256 t256;

	stack u8[SABER_KEYBYTES] message_received;
	stack u8[SABER_COINBYTES] noiseseed;
	stack u8[SABER_INDCPA_PUBLICKEYBYTES] pk;
	stack u8[SABER_BYTES_CCA_DEC] ciphertext;

	stack u64 sciphertextp;

	for i = 0 to SABER_KEYBYTES / 32 {
		t256 = (u256) [message_receivedp + 32 * i];
		message_received[u256 i] = t256;
	}

	for i = 0 to SABER_COINBYTES / 32 {
		t256 = (u256) [noiseseedp + 32 * i];
		noiseseed[u256 i] = t256;
	}

	for i = 0 to SABER_INDCPA_PUBLICKEYBYTES / 32 {
		t256 = (u256) [pkp + 32 * i];
		pk[u256 i] = t256;
	}

	sciphertextp = ciphertextp;

	ciphertext = indcpa_kem_enc(message_received, noiseseed, pk, ciphertext);

	ciphertextp = sciphertextp;

	for i = 0 to SABER_BYTES_CCA_DEC / 32 {
		t256 = ciphertext[u256 i];
		(u256) [ciphertextp + 32 * i] = t256;
	}
}

export fn indcpa_kem_dec_jazz(reg u64 skp, reg u64 ciphertextp, reg u64 message_decp)
{
	inline int i;

	reg u256 t256;

	stack u8[SABER_INDCPA_SECRETKEYBYTES] sk;
	stack u8[SABER_BYTES_CCA_DEC] ciphertext;
	stack u8[SABER_KEYBYTES] message_dec;

	stack u64 smessage_decp;

	for i = 0 to SABER_INDCPA_SECRETKEYBYTES / 32 {
		t256 = (u256) [skp + 32 * i];
		sk[u256 i] = t256;
	}

	for i = 0 to SABER_BYTES_CCA_DEC / 32 {
		t256 = (u256) [ciphertextp + 32 * i];
		ciphertext[u256 i] = t256;
	}

	smessage_decp = message_decp;

	message_dec = indcpa_kem_dec(sk, ciphertext, message_dec);

	message_decp = smessage_decp;

	for i = 0 to SABER_KEYBYTES / 32 {
		t256 = message_dec[u256 i];
		(u256) [message_decp + 32 * i] = t256;
	}
}

