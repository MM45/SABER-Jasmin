/*** SABER_indcpa_regular_indcpa_kem_enc.jahh: File containing the Jasmin implementation of the indcpa_kem_enc function from SABER_indcpa.c, with (regular) SABER parameters ***/

#ifndef INDCPA_KEM_ENC_HH
#define INDCPA_KEM_ENC_HH

#include "SABER_params.jahh"
#include "SABER_indcpa_regular_GenMatrix.jahh"
#include "SABER_indcpa_regular_GenSecret.jahh"
#include "pack_unpack_regular_POLVECp2BS.jahh"
#include "pack_unpack_regular_BS2POLVECp.jahh"
#include "pack_unpack_regular_SABER_pack_4bit.jahh"
#include "polyvec_ntt_regular_polyvec_iprod.jahh"
#include "polyvec_ntt_regular_polyvec_matrix_vector_mul.jahh"

inline fn indcpa_kem_enc(stack u8[SABER_KEYBYTES] message_received, stack u8[32] noiseseed, stack u8[SABER_INDCPA_PUBLICKEYBYTES] pk, stack u8[SABER_BYTES_CCA_DEC] ciphertext) -> stack u8[SABER_BYTES_CCA_DEC]
{
	inline int i;
	inline int j;
	
	reg u16 t16;

	reg u64 transpose;

	reg u256 mod;
	reg u256 modp;
	reg u256 H1_avx;
	reg u256 t256;

	stack u8[SABER_SEEDBYTES] seed;
	stack u8[SABER_SCALEBYTES_KEM] msk_c;
	
	stack u16[SABER_KKN] a;
	stack u16[SABER_KN] pkcl;
	stack u16[SABER_KN] skpv1;
	stack u16[SABER_KN] res;
	stack u16[SABER_N] vprime;
	stack u16[SABER_KEYBYTES * 8] message;

	stack u256 sH1_avx;
	stack u256 smodp;

	for i = 0 to SABER_SEEDBYTES / 32 {
		t256 = pk[u256 SABER_POLYVECCOMPRESSEDBYTES / 32 + i];
		seed[u256 i] = t256;
	}

	a = GenMatrix(a, seed);

	skpv1 = GenSecret(skpv1, noiseseed);

	transpose = 0;
	res = polyvec_matrix_vector_mul(res, a , skpv1, transpose);

	mod = modq_16u16;
	modp = modp_16u16;
	H1_avx = h1_16u16;

	for i = 0 to SABER_KN / 16 {
		t256 = res[u256 i];
		t256 +16u16= H1_avx;
		t256 >>16u16= (SABER_EQ - SABER_EP);
		t256 &16u16= mod;
		res[u256 i] = t256;
	}

	sH1_avx = H1_avx;
	smodp = modp;

	ciphertext[0:SABER_POLYVECCOMPRESSEDBYTES] = POLVECp2BS(ciphertext[0:SABER_POLYVECCOMPRESSEDBYTES], res);

	pkcl = BS2POLVECp(pk[0:SABER_POLYVECCOMPRESSEDBYTES], pkcl);

	vprime = polyvec_iprod(vprime, pkcl, skpv1);

	H1_avx = sH1_avx;
	modp = smodp;

	for i = 0 to SABER_N / 16 {
		t256 = vprime[u256 i];
		t256 +16u16= H1_avx;
		vprime[u256 i] = t256;
	}

	for j = 0 to SABER_KEYBYTES {
		t16 = (16u) message_received[j];
		t16 &= 0x01;
		message[8 * j] = t16;
		for i = 1 to 8 {
			// message[8*j+i] = ((message_received[j]>>i) & 0x01);
			t16 = (16u) message_received[j];
			t16 >>= i;
			t16 &= 0x01;
			message[8 * j + i] = t16;
		}
	}

	for i = 0 to SABER_N / 16 {
		t256 = message[u256 i];
		t256 <<16u16= (SABER_EP - 1);
		message[u256 i] = t256;
	}

	for i = 0 to SABER_N / 16 {
		t256 = vprime[u256 i];
		t256 -16u16= message[u256 i];
		t256 &16u16= modp;
		t256 >>16u16= (SABER_EP-SABER_ET);
		vprime[u256 i] = t256;
	}

	msk_c = SABER_pack_4bit(msk_c, vprime);

	for j = 0 to SABER_SCALEBYTES_KEM / 32 {
		t256 = msk_c[u256 j];
		ciphertext[u256 SABER_POLYVECCOMPRESSEDBYTES / 32 + j] = t256;
	}

	return ciphertext;
}

#endif
