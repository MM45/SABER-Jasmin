/*** kem_regular_crypto_kem_dec.jahh: File containing the Jasmin implementation of the crypto_kem_dec function from kem.c, with (regular) SABER parameters ***/

#ifndef CRYPTO_KEM_DEC_HH
#define CRYPTO_KEM_DEC_HH

#include "SABER_params.jahh"
#include "SABER_indcpa_regular_indcpa_kem_dec.jahh"
#include "SABER_indcpa_regular_indcpa_kem_enc.jahh"
#include "fips202_regular_sha3_512_64.jahh"
#include "fips202_regular_sha3_256_CCADEC.jahh"
#include "fips202_regular_sha3_256_64.jahh"
#include "verify_regular_cmov.jahh"
#include "verify_regular_verify.jahh"

inline fn crypto_kem_dec(stack u8[SABER_HASHBYTES] k, stack u8[SABER_BYTES_CCA_DEC] c, stack u8[SABER_SECRETKEYBYTES] sk) -> stack u8[SABER_HASHBYTES]
{
	inline int i;

	reg u8 t8;

	reg u64 fail;

	stack u8[SABER_BYTES_CCA_DEC] cmp;
	stack u8[64] buf;
	stack u8[64] kr;

	stack u64 sfail;

	buf[0:SABER_KEYBYTES] = indcpa_kem_dec(sk[0:SABER_INDCPA_SECRETKEYBYTES], c, buf[0:SABER_KEYBYTES]);

	for i = 0 to 32 {
		t8 = sk[SABER_SECRETKEYBYTES - 64 + i];
		buf[32 + i] = t8;
	}

	kr = sha3_512_64(kr, buf);

	cmp = indcpa_kem_enc(buf[0:SABER_KEYBYTES], kr[32:32], sk[SABER_INDCPA_SECRETKEYBYTES:SABER_INDCPA_PUBLICKEYBYTES], cmp);

	fail = verify(c, cmp);

	sfail = fail;

	kr[32:32] = sha3_256_CCADEC(kr[32:32], c);

	fail = sfail;
	
	t8 = (8u) fail;
	
	kr[0:SABER_KEYBYTES] = cmov(kr[0:SABER_KEYBYTES], sk[(SABER_SECRETKEYBYTES - SABER_KEYBYTES):SABER_KEYBYTES], t8);

	k = sha3_256_64(k, kr);

	return k;
}

#endif