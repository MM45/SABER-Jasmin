/*** kem_regular_crypto_kem_enc_randominc.jahh: File containing the Jasmin implementation of the crypto_kem_enc_randominc function from kem.c, with (regular) SABER parameters ***/

#ifndef CRYPTO_KEM_ENC_RANDOMINC_HH
#define CRYPTO_KEM_ENC_RANDOMINC_HH

#include "SABER_params.jahh"
#include "fips202_regular_sha3_256_32.jahh"
#include "fips202_regular_sha3_256_64.jahh"
#include "fips202_regular_sha3_256_PUBKEYBYTES.jahh"
#include "fips202_regular_sha3_256_CCADEC.jahh"
#include "fips202_regular_sha3_512_64.jahh"
#include "SABER_indcpa_regular_indcpa_kem_enc.jahh"

inline fn crypto_kem_enc_randominc(stack u8[SABER_BYTES_CCA_DEC] c, stack u8[SABER_HASHBYTES] k, stack u8[SABER_INDCPA_PUBLICKEYBYTES] pk, stack u8[32] random_bytes_crypto) -> stack u8[SABER_BYTES_CCA_DEC], stack u8[SABER_HASHBYTES]
{
	reg u256 t256;

	stack u8[64] kr;
	stack u8[64] buf;

	t256 = random_bytes_crypto[u256 0];
	buf[u256 0] = t256;

	buf[0:32] = sha3_256_32(buf[0:32], buf[0:32]);

	buf[32:32] = sha3_256_PUBKEYBYTES(buf[32:32], pk);

	kr = sha3_512_64(kr, buf);

	c = indcpa_kem_enc(buf[0:32], kr[32:32], pk, c);

	kr[32:32] = sha3_256_CCADEC(kr[32:32], c);

	k = sha3_256_64(k, kr);

	return c, k;
}

#endif