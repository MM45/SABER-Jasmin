/*** SABER_indcpa_regular_indcpa_kem_keypair_randominc.jahh: File containing the Jasmin implementation of the indcpa_kem_keypair_randominc function from SABER_indcpa.c, with (regular) SABER parameters ***/

#ifndef INDCPA_KEM_KEYPAIR_RANDOMINC_HH
#define INDCPA_KEM_KEYPAIR_RANDOMINC_HH

#include "SABER_params.jahh"
#include "fips202_regular_shake128_32_32.jahh"
#include "SABER_indcpa_regular_GenMatrix.jahh"
#include "SABER_indcpa_regular_GenSecret.jahh"
#include "pack_unpack_regular_POLVECq2BS.jahh"
#include "pack_unpack_regular_POLVECp2BS.jahh"
#include "polyvec_ntt_regular_polyvec_matrix_vector_mul.jahh"


inline fn indcpa_kem_keypair_randominc(stack u8[SABER_INDCPA_PUBLICKEYBYTES] pk, stack u8[SABER_INDCPA_SECRETKEYBYTES] sk, stack u8[SABER_SEEDBYTES] seed, stack u8[SABER_COINBYTES] noiseseed) -> stack u8[SABER_INDCPA_PUBLICKEYBYTES], stack u8[SABER_INDCPA_SECRETKEYBYTES]
{
	inline int i;

	reg u64 transpose;

	reg u256 t256;
	reg u256 mod;
	reg u256 H1_avx;

	stack u16[SABER_KKN] a;
	stack u16[SABER_KN] skpv1;
	stack u16[SABER_KN] res;

	seed = shake128_32_32(seed, seed);

	a = GenMatrix(a, seed);

	skpv1 = GenSecret(skpv1, noiseseed);

	transpose = 1;
	res = polyvec_matrix_vector_mul(res, a, skpv1, transpose);

	mod = modq_16u16;
	H1_avx = h1_16u16;

	for i = 0 to SABER_KN / 16 {
		t256 = res[u256 i];
		t256 +16u16= H1_avx;
		t256 >>16u16= (SABER_EQ - SABER_EP);
		t256 &16u16= mod;
		res[u256 i] = t256;
	}

	sk = POLVECq2BS(sk, skpv1);

	pk[0:SABER_POLYVECCOMPRESSEDBYTES] = POLVECp2BS(pk[0:SABER_POLYVECCOMPRESSEDBYTES], res);

	for i = 0 to SABER_SEEDBYTES / 32 {
		t256 = seed[u256 i];
		pk[u256 SABER_POLYVECCOMPRESSEDBYTES / 32 + i] = t256;
	}

	return pk, sk;
}

#endif
