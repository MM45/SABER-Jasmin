








param int CRYPTO_SECRETKEYBYTES = 2304;
param int CRYPTO_PUBLICKEYBYTES = (3 * 320 + 32);
param int CRYPTO_BYTES = 32;
param int CRYPTO_CIPHERTEXTBYTES = 1088;
param int Saber_type = 2;

param int SABER_K = 3;
param int SABER_MU = 8;
param int SABER_ET = 4;

param int SABER_EQ = 13;
param int SABER_EP = 10;

param int SABER_N = 256;
param int SABER_Q = 8192;
param int SABER_P = 1024;

param int SABER_SEEDBYTES = 32;
param int SABER_NOISESEEDBYTES = 32;
param int SABER_COINBYTES = 32;
param int SABER_KEYBYTES = 32;

param int SABER_HASHBYTES = 32;

param int SABER_POLYBYTES = 416;

param int SABER_POLYVECBYTES = (SABER_K * SABER_POLYBYTES);

param int SABER_POLYVECCOMPRESSEDBYTES = (SABER_K * 320);

param int SABER_CIPHERTEXTBYTES = (SABER_POLYVECCOMPRESSEDBYTES);



param int SABER_SCALEBYTES_KEM = (SABER_ET * SABER_N / 8);

param int SABER_INDCPA_PUBLICKEYBYTES = (SABER_POLYVECCOMPRESSEDBYTES + SABER_SEEDBYTES);
param int SABER_INDCPA_SECRETKEYBYTES = (SABER_POLYVECBYTES);

param int SABER_PUBLICKEYBYTES = (SABER_INDCPA_PUBLICKEYBYTES);

param int SABER_SECRETKEYBYTES = (SABER_INDCPA_SECRETKEYBYTES + SABER_INDCPA_PUBLICKEYBYTES + SABER_HASHBYTES + SABER_KEYBYTES);

param int SABER_BYTES_CCA_DEC = (SABER_POLYVECCOMPRESSEDBYTES + SABER_SCALEBYTES_KEM);



param int SABER_KN = (SABER_K * SABER_N);
param int SABER_KKN = (SABER_K * SABER_K * SABER_N);
param int N_SB = (SABER_N / 4);
param int N_SB_RES = (2 * N_SB - 1);

param int SHAKE128_RATE = 168;
param int SHAKE256_RATE = 136;
param int SHA3_256_RATE = 136;
param int SHA3_512_RATE = 72;

param int KK13N8 = (SABER_K * SABER_K * (13 * SABER_N / 8));
param int MUNK8 = (SABER_MU * SABER_N * SABER_K / 8);

param int h1 = 4;
param int h2 = 228;




u128 zero_u128 = 0;

u256 zero_u256 = 0;

u256 h1_16u16 = 0x0004000400040004000400040004000400040004000400040004000400040004;
u256 h2_16u16 = 0x00e400e400e400e400e400e400e400e400e400e400e400e400e400e400e400e4;
u256 modp_16u16 = 0x03ff03ff03ff03ff03ff03ff03ff03ff03ff03ff03ff03ff03ff03ff03ff03ff;
u256 modq_16u16 = 0x1fff1fff1fff1fff1fff1fff1fff1fff1fff1fff1fff1fff1fff1fff1fff1fff;

u256 twobit_mask_16u16 = 0x0003000300030003000300030003000300030003000300030003000300030003;
u256 fourbit_mask_16u16 = 0x000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f;
u256 sixbit_mask_16u16 = 0x003f003f003f003f003f003f003f003f003f003f003f003f003f003f003f003f;

u256 modq_8u32 = 0x00001fff00001fff00001fff00001fff00001fff00001fff00001fff00001fff;

u256 fourbit_mask_8u32 = 0x0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f;
u256 sixteenbit_mask_8u32 = 0x0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff;

u256 onebit_mask_64u4 = 0x1111111111111111111111111111111111111111111111111111111111111111;






fn cbd(reg ptr u16[SABER_N] r, reg ptr u8[SABER_N] buf) -> reg ptr u16[SABER_N]
{
    inline int i;

    reg u256 tt256;
    reg u256 onebit_mask;
    reg u256 fourbit_mask;
    reg u256 qmod;
    reg u256 sixteen_bit_mask;

    reg u256[2] d256;
    reg u256[2] t256;
    reg u256[2] a256;
    reg u256[2] b256;
    reg u256[4] r256;
    reg u256[2] ord256;

    onebit_mask = onebit_mask_64u4;
    fourbit_mask = fourbit_mask_8u32;
    qmod = modq_8u32;
    sixteen_bit_mask = sixteenbit_mask_8u32;

    for i = 0 to (SABER_N / 64) {
        t256[0] = buf[u256 2 * i];
        t256[1] = buf[u256 2 * i + 1];

        d256[0] = t256[0] & onebit_mask;

        tt256 = t256[0] >>8u32 1;
        tt256 &= onebit_mask;
        d256[0] +8u32= tt256;

        tt256 = t256[0] >>8u32 2;
        tt256 &= onebit_mask;
        d256[0] +8u32= tt256;

        tt256 = t256[0] >>8u32 3;
        tt256 &= onebit_mask;
        d256[0] +8u32= tt256;

        d256[1] = t256[1] & onebit_mask;

        tt256 = t256[1] >>8u32 1;
        tt256 &= onebit_mask;
        d256[1] +8u32= tt256;

        tt256 = t256[1] >>8u32 2;
        tt256 &= onebit_mask;
        d256[1] +8u32= tt256;

        tt256 = t256[1] >>8u32 3;
        tt256 &= onebit_mask;
        d256[1] +8u32= tt256;


        a256[0] = d256[0] & fourbit_mask;

        b256[0] = d256[0] >>8u32 4;
        b256[0] &= fourbit_mask;

        a256[1] = d256[1] & fourbit_mask;

        b256[1] = d256[1] >>8u32 4;
        b256[1] &= fourbit_mask;

        t256[0] = a256[0] -8u32 b256[0];
        t256[1] = a256[1] -8u32 b256[1];

        t256[0] &= sixteen_bit_mask;
        t256[1] &= sixteen_bit_mask;



        r256[0] = #VPACKUS_8u32(t256[0], t256[1]);


        a256[0] = d256[0] >>8u32 8;
        a256[0] &= fourbit_mask;

        b256[0] = d256[0] >>8u32 12;
        b256[0] &= fourbit_mask;

        a256[1] = d256[1] >>8u32 8;
        a256[1] &= fourbit_mask;

        b256[1] = d256[1] >>8u32 12;
        b256[1] &= fourbit_mask;

        t256[0] = a256[0] -8u32 b256[0];
        t256[1] = a256[1] -8u32 b256[1];

        t256[0] &= sixteen_bit_mask;
        t256[1] &= sixteen_bit_mask;



        r256[1] = #VPACKUS_8u32(t256[0], t256[1]);


        a256[0] = d256[0] >>8u32 16;
        a256[0] &= fourbit_mask;

        b256[0] = d256[0] >>8u32 20;
        b256[0] &= fourbit_mask;

        a256[1] = d256[1] >>8u32 16;
        a256[1] &= fourbit_mask;

        b256[1] = d256[1] >>8u32 20;
        b256[1] &= fourbit_mask;

        t256[0] = a256[0] -8u32 b256[0];
        t256[1] = a256[1] -8u32 b256[1];

        t256[0] &= sixteen_bit_mask;
        t256[1] &= sixteen_bit_mask;



        r256[2] = #VPACKUS_8u32(t256[0], t256[1]);


        a256[0] = d256[0] >>8u32 24;
        a256[0] &= fourbit_mask;

        b256[0] = d256[0] >>8u32 28;

        a256[1] = d256[1] >>8u32 24;
        a256[1] &= fourbit_mask;

        b256[1] = d256[1] >>8u32 28;

        t256[0] = a256[0] -8u32 b256[0];
        t256[1] = a256[1] -8u32 b256[1];

        t256[0] &= sixteen_bit_mask;
        t256[1] &= sixteen_bit_mask;



        r256[3] = #VPACKUS_8u32(t256[0], t256[1]);

        t256[0] = #VPUNPCKL_16u16(r256[0], r256[2]);
        t256[1] = #VPUNPCKL_16u16(r256[1], r256[3]);
        t256[0] = #VPERMQ(t256[0], 216);
        t256[1] = #VPERMQ(t256[1], 216);

        ord256[0] = #VPUNPCKL_16u16(t256[0], t256[1]);
        ord256[1] = #VPUNPCKH_16u16(t256[0], t256[1]);

        r[u256 4 * i] = ord256[0];
        r[u256 4 * i + 1] = ord256[1];

        t256[0] = #VPUNPCKH_16u16(r256[0], r256[2]);
        t256[1] = #VPUNPCKH_16u16(r256[1], r256[3]);
        t256[0] = #VPERMQ(t256[0], 216);
        t256[1] = #VPERMQ(t256[1], 216);

        ord256[0] = #VPUNPCKL_16u16(t256[0], t256[1]);
        ord256[1] = #VPUNPCKH_16u16(t256[0], t256[1]);

        r[u256 4 * i + 2] = ord256[0];
        r[u256 4 * i + 3] = ord256[1];
    }

 return r;
}

export fn cbd_jazz(reg u64 rp, reg u64 bufp)
{
 inline int i;

 reg u8 tbuf;
 reg u16 tr;

 stack u8[SABER_N] buf;
 stack u16[SABER_N] r;

 for i = 0 to SABER_N {
  tbuf = (u8) [bufp + i];
  buf[i] = tbuf;
 }

 r = cbd(r, buf);

 for i = 0 to SABER_N {
  tr = r[i];
  (u16) [rp + 2 * i] = tr;
 }

}
