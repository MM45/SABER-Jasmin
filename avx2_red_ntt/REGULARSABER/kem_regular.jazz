/*** kem_regular.jazz: File containing the Jasmin wrappers of the functions in the kem_regular_*.jahh files ***/

#include "SABER_params.jahh"
#include "kem_regular_crypto_kem_keypair_randominc.jahh"
#include "kem_regular_crypto_kem_enc_randominc.jahh"
#include "kem_regular_crypto_kem_dec.jahh"


export fn crypto_kem_keypair_randominc_jazz(reg u64 pkp, reg u64 skp, reg u64 random_bytes_cryptop, reg u64 indcpa_seedp, reg u64 indcpa_noiseseedp)
{
	inline int i;

	reg u256 t256;

	stack u8[SABER_PUBLICKEYBYTES] pk;
	stack u8[SABER_SECRETKEYBYTES] sk;
	stack u8[SABER_KEYBYTES] random_bytes_crypto;
	stack u8[SABER_SEEDBYTES] indcpa_seed;
	stack u8[SABER_COINBYTES] indcpa_noiseseed;

	stack u64 spkp;
	stack u64 sskp;

	for i = 0 to SABER_KEYBYTES / 32 {
		t256 = (u256) [random_bytes_cryptop + 32 * i];
		random_bytes_crypto[u256 i] = t256;
	}

	for i = 0 to SABER_SEEDBYTES / 32 {
		t256 = (u256) [indcpa_seedp + 32 * i];
		indcpa_seed[u256 i] = t256;
	}

	for i = 0 to SABER_COINBYTES / 32 {
		t256 = (u256) [indcpa_noiseseedp + 32 * i];
		indcpa_noiseseed[u256 i] = t256;
	}

	spkp = pkp;
	sskp = skp;

	pk, sk = crypto_kem_keypair_randominc(pk, sk, random_bytes_crypto, indcpa_seed, indcpa_noiseseed);

	pkp = spkp;
	skp = sskp;

	for i = 0 to SABER_PUBLICKEYBYTES / 32 {
		t256 = pk[u256 i]; 
		(u256) [pkp + 32 * i] = t256;
	}

	for i = 0 to SABER_SECRETKEYBYTES / 32 {
		t256 = sk[u256 i]; 
		(u256) [skp + 32 * i] = t256;
	}
}


export fn crypto_kem_enc_randominc_jazz(reg u64 cp, reg u64 kp, reg u64 pkp, reg u64 random_bytes_cryptop)
{
	inline int i;

	reg u256 t256;

	stack u8[SABER_BYTES_CCA_DEC] c;
	stack u8[SABER_HASHBYTES] k;
	stack u8[SABER_INDCPA_PUBLICKEYBYTES] pk;
	stack u8[32] random_bytes_crypto;

	stack u64 scp;
	stack u64 skp;

	for i = 0 to SABER_INDCPA_PUBLICKEYBYTES / 32 {
		t256 = (u256) [pkp + 32 * i];
		pk[u256 i] = t256;
	}

	t256 = (u256) [random_bytes_cryptop];
	random_bytes_crypto[u256 0] = t256;

	scp = cp;
	skp = kp;

	c, k = crypto_kem_enc_randominc(c, k, pk, random_bytes_crypto);

	cp = scp;
	kp = skp;

	for i = 0 to SABER_BYTES_CCA_DEC / 32 {
		t256 = c[u256 i];
		(u256) [cp + 32 * i] = t256;
	}
	
	for i = 0 to SABER_HASHBYTES / 32 {
		t256 = k[u256 i];
		(u256) [kp + 32 * i] = t256;
	}
}

export fn crypto_kem_dec_jazz(reg u64 kp, reg u64 cp, reg u64 skp)
{
	inline int i;

	reg u256 t256;

	stack u8[SABER_HASHBYTES] k;
	stack u8[SABER_BYTES_CCA_DEC] c;
	stack u8[SABER_SECRETKEYBYTES] sk;

	stack u64 stkp;

	for i = 0 to SABER_BYTES_CCA_DEC / 32 {
		t256 = (u256) [cp + 32 * i];
		c[u256 i] = t256;
	}

	for i = 0 to SABER_SECRETKEYBYTES / 32 {
		t256 = (u256) [skp + 32 * i];
		sk[u256 i] = t256;
	}

	stkp = kp;

	k = crypto_kem_dec(k, c, sk);
	
	kp = stkp;

	for i = 0 to SABER_HASHBYTES / 32 {
		t256 = k[u256 i];
		(u256) [kp + 32 * i] = t256;
	}
}