/*** split_mdarray_kn_regular.jahh: File containing an auxilliary Jasmin function for splitting a "multidimensional" u16 array into separate arrays, with (regular) SABER parameters ***/

#ifndef SPLIT_MDARRAY_KN_HH
#define SPLIT_MDARRAY_KN_HH

#include "SABER_params.jahh"

inline fn split_mdarray_kn(stack u16[SABER_KN] data) -> stack u16[SABER_N], stack u16[SABER_N], stack u16[SABER_N]
{
	inline int i;

	reg u16 t;

	stack u16[SABER_N] d0;
	stack u16[SABER_N] d1;
	stack u16[SABER_N] d2;

	// TODO: Might combine in single for loop
	for i = 0 to SABER_N {
		t = data[i];
		d0[i] = t;
	}

	for i = SABER_N to (2 * SABER_N) {
		t = data[i];
		d1[i - SABER_N] = t;
	}

	for i = (2 * SABER_N) to (3 * SABER_N) {
		t = data[i];
		d2[i - (2 * SABER_N)] = t;
	}

	return d0, d1, d2;
}

#endif