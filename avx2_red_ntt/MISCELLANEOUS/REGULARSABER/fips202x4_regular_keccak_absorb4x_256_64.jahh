/*** fips202x4_regular_keccak_absorb4x_256_64.jahh: File containing the Jasmin implementation of keccak_absorb4x function from fips202x4.c, where rate == SHA3_256_RATE, mlen == 64 and with (regular) SABER parameters ***/

#ifndef KECCAK_ABSORB4X_256_64_HH
#define KECCAK_ABSORB4X_256_64_HH

#include "SABER_params.jahh"
#include "fips202x4_regular_load64.jahh"

inline fn keccak_absorb4x_256_64(reg ptr u256[25] s, reg ptr u8[64] m0, reg ptr u8[64] m1, reg ptr u8[64] m2, reg ptr u8[64] m3) -> reg ptr u256[25]
{
	inline int i;

	reg u8 t8;

	reg u64 t64;

	stack u8[200] t0;
	stack u8[200] t1;
	stack u8[200] t2;
	stack u8[200] t3;

	for i = 0 to SHA3_256_RATE {
		t0[i] = 0;
		t1[i] = 0;
		t2[i] = 0;
		t3[i] = 0;
	}

	for i = 0 to 64 {
		t8 = m0[i];
		t0[i] = t8;
		
		t8 = m1[i];
		t1[i] = t8;
		
		t8 = m2[i];
		t2[i] = t8;
		
		t8 = m3[i];
		t3[i] = t8;
	}

	t0[64] = 0x06;
	t1[64] = 0x06;
	t2[64] = 0x06;
	t3[64] = 0x06;

	t0[SHA3_256_RATE - 1] |= 128;
	t1[SHA3_256_RATE - 1] |= 128;
	t2[SHA3_256_RATE - 1] |= 128;
	t3[SHA3_256_RATE - 1] |= 128;

	for i = 0 to (SHA3_256_RATE / 8) {
		t64 = t0[u64 i];
		s[u64 4 * i] ^= t64;
		t64 = t1[u64 i];
		s[u64 4 * i + 1] ^= t64;
		t64 = t2[u64 i];
		s[u64 4 * i + 2] ^= t64;
		t64 = t3[u64 i];
		s[u64 4 * i + 3] ^= t64;
	}

	return s;
}

#endif