inline
fn mask32(reg u64 x) -> reg u64 {
  x = x & 0xffffffff;
  return x;
}

inline
fn rotate(reg u64 x, inline int bits) -> reg u64 
{
  /*
  reg u64 t1;
  reg u64 t2;
  t1 = x;
  t1 = t1 << bits;
  t1 = mask32(t1);
  t2 = x;
  t2 = t2 >> (32-bits);
  t2 = t2|t1;
  return t2;
  */
  /*
  reg u64 t1;
  t1 = #ROL32(t1,bits);
  return t1;
  */
  reg u64 t1;
  reg u64 t2;
  t1 = x;
  t1 = t1 << 32;
  t2 = x;
  t2 = #SHLD(t2,t1,bits);
  t2 = mask32(t2);
  return t2;
}

export fn gimli(reg u64 state) 
{
  inline int round;
  inline int column;
  reg u64 x;
  reg u64 y;
  reg u64 z;
  reg u64 u;
  reg u64 v;

  for round = 24 downto 0
  {
    for column = 0 to 4
    {
      x = [state + 8*column];
      x = rotate(x, 24);
      y = [state + 8*(column + 4)];
      y = rotate(y,  9);
      z = [state + 8*(column + 8)];

      u = x;
      v = z;
      v = v << 1; v = mask32(v);
      x = z; 
      x = x & y;
      x = x << 2; x = mask32(x);
      x = x ^ u;
      x = x ^ v;
      v = y;
      y = u;
      y = y | z;
      y = y << 1; y = mask32(y);
      y = y ^ u;
      y = y ^ v;
      u = u & v;
      u = u << 3; u = mask32(u);
      z = z ^ v;
      z = z ^ u;

      [state + 8 * (column + 8)] = x;
      [state + 8 * (column + 4)] = y;
      [state + 8 * column]       = z;
    }

    if (round & 3 == 0) {
      // small swap: pattern s...s...s... etc.
      x = [state + 8*0];
      u = [state + 8*1];
      u = u ^ (0x9e377900 + round);
      [state + 8*0] = u;
      [state + 8*1] = x;
      x = [state + 8*2];
      u = [state + 8*3];
      [state + 8*2] = u;
      [state + 8*3] = x;
    }
    if (round & 3 == 2) {
      // big swap: pattern ..S...S...S. etc.
      x = [state + 8*0];
      u = [state + 8*2];
      [state + 8*0] = u;
      [state + 8*2] = x;
      x = [state + 8*1];
      u = [state + 8*3];
      [state + 8*1] = u;
      [state + 8*3] = x;
    }
  }
}
