/*** pack_unpack_fire_SABER_un_pack6bit.jahh: File containing the Jasmin implementation of the SABER_un_pack6bit function from pack_unpack.c, with FIRESABER parameters ***/

#ifndef SABER_UN_PACK6BIT_HH
#define SABER_UN_PACK6BIT_HH

#include "SABER_params.jahh"

inline fn SABER_un_pack6bit(stack u8[SABER_SCALEBYTES_KEM] bytes, stack u16[SABER_N] data) -> stack u16[SABER_N]
{
	inline int j;

	reg u16 b1;
	reg u16 b2;

	for j = 0 to (SABER_N / 4) {
		// data[offset_data + 0] = bytes[offset_byte+0]&0x3f;
		b1 = (16u) bytes[3 * j];
		b1 &= 0x3f;
		data[4 * j] = b1;

		// data[offset_data + 1] = ((bytes[offset_byte+0]>>6)&0x03) |  ((bytes[offset_byte+1]&0x0f)<<2);
		b1 = (16u) bytes[3 * j];
		b1 >>= 6;
		b1 &= 0x03;
		b2 = (16u) bytes[3 * j + 1];
		b2 &= 0x0f;
		b2 <<= 2;
		b1 |= b2;
		data[4 * j + 1] = b1;

		// data[offset_data + 2] = ((bytes[offset_byte+1]&0xff)>>4) | ((bytes[offset_byte+2]&0x03)<<4);
		b1 = (16u) bytes[3 * j + 1];
		b1 &= 0xff;
		b1 >>= 4;
		b2 = (16u) bytes[3 * j + 2];
		b2 &= 0x03;
		b2 <<= 4;
		b1 |= b2;
		data[4 * j + 2] = b1;

		// data[offset_data + 3] = ((bytes[offset_byte+2]&0xff)>>2);
		b1 = (16u) bytes[3 * j + 2];
		b1 &= 0xff;
		b1 >>=2;
		data[4 * j + 3] = b1;
	}

	return data;
}

#endif
