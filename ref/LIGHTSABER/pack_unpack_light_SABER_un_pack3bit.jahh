/*** pack_unpack_SABER_un_pack3bit.jahh: File containing the Jasmin implementation of the SABER_un_pack3bit function from pack_unpack.c, with LIGHTSABER parameters ***/

#ifndef SABER_UN_PACK3BIT_HH
#define SABER_UN_PACK3BIT_HH

#include "SABER_params.jahh"

inline fn SABER_un_pack3bit(stack u8[SABER_SCALEBYTES_KEM] bytes, stack u16[SABER_N] data) -> stack u16[SABER_N]
{
	inline int j;

	reg u16 b1;
	reg u16 b2;

	for j = 0 to (SABER_N / 8) {
		// data[offset_data + 0] = (bytes[offset_byte+0])&0x07;
		b1 = (16u) bytes[3 * j];
		b1 &= 0x07;
		data[8 * j] = b1;

		// data[offset_data + 1] = ( (bytes[offset_byte+0])>>3 )&0x07;
		b1 = (16u)bytes[3 * j];
		b1 >>= 3;
		b1 &= 0x07;
		data[8 * j + 1] = b1;

		// data[offset_data + 2] = ( ( (bytes[offset_byte+0])>>6 )&0x03) | ( ( (bytes[offset_byte+1])&0x01)<<2 );
		b1 = (16u) bytes[3 * j];
		b1 >>= 6;
		b1 &= 0x03;
		b2 = (16u) bytes[3 * j + 1];
		b2 &= 0x01;
		b2 <<= 2;
		b1 |= b2;
		data[8 * j + 2] = b1;

		// data[offset_data + 3] = ( (bytes[offset_byte+1])>>1 )&0x07;
		b1 = (16u) bytes[3 * j + 1];
		b1 >>= 1;
		b1 &= 0x07;
		data[8 * j + 3] = b1;

		// data[offset_data + 4] = ( (bytes[offset_byte+1])>>4 )&0x07;
		b1 = (16u) bytes[3 * j + 1];
		b1 >>= 4;
		b1 &= 0x07;
		data[8 * j + 4] = b1;

		// data[offset_data + 5] = ( ( (bytes[offset_byte+1])>>7 )&0x01) | ( ( (bytes[offset_byte+2])&0x03)<<1 );
		b1 = (16u) bytes[3 * j + 1];
		b1 >>= 7;
		b1 &= 0x01;
		b2 = (16u) bytes[3 * j + 2];
		b2 &= 0x03;
		b2 <<= 1;
		b1 |= b2;
		data[8 * j + 5] = b1;

		// data[offset_data + 6] = ( (bytes[offset_byte+2]>>2)&0x07 );
		b1 = (16u) bytes[3 * j + 2];
		b1 >>= 2;
		b1 &= 0x07; 
		data[8 * j + 6] = b1;		

		// data[offset_data + 7] = ( (bytes[offset_byte+2]>>5)&0x07 );
		b1 = (16u) bytes[3 * j + 2];
		b1 >>= 5;
		b1 &= 0x07;
		data[8 * j + 7] = b1;		
	}

	return data;
}

#endif
