/*** fips202_regular_shake128_32_32.jahh: File containing the Jasmin implementation of shake128 function from fips202.c, where outlen == 32, inlen == 32 and with (regular) SABER parameters ***/

#ifndef SHAKE128_32_32_HH
#define SHAKE128_32_32_HH

#include "SABER_params.jahh"
#include "fips202_regular_keccak_absorb_128_32.jahh"
#include "fips202_regular_keccak_squeezeblocks_128_32.jahh"
#include "fips202_regular_keccak_squeezeblocks_128_128.jahh"

inline fn shake128_32_32(stack u8[32] output, stack u8[32] input) -> stack u8[32]
{
	inline int i;
	inline int nblocks;
	inline int handled;
	inline int remainder;
	
	reg u8 t8;
	
	stack u8[SHAKE128_RATE] t;

	stack u64[25] s;
	
	nblocks = 32 / SHAKE128_RATE; // TODO: == 0 (can remove)
	handled = nblocks * SHAKE128_RATE;
	remainder = 32 - handled;

	for i = 0 to 25 {
		s[i] = 0;
	}

	s = keccak_absorb_128_32(s, input, 0x1F);
	
	output, s = keccak_squeezeblocks_128_32(output, s);

	if (remainder > 0) {
		t, s = keccak_squeezeblocks_128_128(t, s);

		for i = 0 to remainder {
			t8 = t[i];
			output[handled + i] = t8;
		}
	}

	return output;
}

#endif