/*** cbd_regular_cbd.jahh: File containing the Jasmin implementation of cbd function from cbd.c, with (regular) SABER parameters ***/

#ifndef CBD_HH
#define CBD_HH

#include "SABER_params.jahh"
#include "cbd_regular_load_littleendian.jahh"

inline fn cbd(stack u16[SABER_N] r, stack u8[SABER_N] buf) -> stack u16[SABER_N]
{
	inline int i;

	reg u8 t8;

	reg u16 t16;

	reg u32 t32;
	reg u32 d;
	reg u32 tt;

	stack u8[4] bufarg;

	stack u32[4] a;
	stack u32[4] b;

	for i = 0 to (SABER_N / 4) {
		t8 = buf[4 * i];
		bufarg[0] = t8;
		
		t8 = buf[4 * i + 1];
		bufarg[1] = t8;
		
		t8 = buf[4 * i + 2];
		bufarg[2] = t8;
		
		t8 = buf[4 * i + 3];
		bufarg[3] = t8;

		t32 = load_littleendian(bufarg);
		d = 0;

		// for(j=0;j<4;j++) d += (t >> j) & 0x11111111;
		tt = t32;
		tt >>= 0;
		tt &= 0x11111111;
		d += tt;

		tt = t32;
		tt >>= 1;
		tt &= 0x11111111;
		d += tt;

		tt = t32;
		tt >>= 2;
		tt &= 0x11111111;
		d += tt;

		tt = t32;
		tt >>= 3;
		tt &= 0x11111111;
		d += tt;

    	// a[0] =  d & 0xf;
    	t32 = d;
    	t32 &= 0xf;
		a[0] = t32;

    	// b[0] = (d >>  4) & 0xf;
    	t32 = d;
    	t32 >>= 4;
    	t32 & = 0xf;
    	b[0] = t32;

    	// a[1] = (d >>  8) & 0xf;
    	t32 = d;
    	t32 >>= 8;
    	t32 &= 0xf;
    	a[1] = t32;

    	// b[1] = (d >> 12) & 0xf;
    	t32 = d;
    	t32 >>= 12;
    	t32 &= 0xf;
    	b[1] = t32;

    	// a[2] = (d >> 16) & 0xf;
    	t32 = d;
    	t32 >>= 16;
    	t32 &= 0xf;
    	a[2] = t32;

    	// b[2] = (d >> 20) & 0xf;
		t32 = d;
    	t32 >>= 20;
    	t32 &= 0xf;
    	b[2] = t32;

    	// a[3] = (d >> 24) & 0xf;
    	t32 = d;
    	t32 >>= 24;
    	t32 &= 0xf;
    	a[3] = t32;
    	
    	// b[3] = (d >> 28);
    	t32 = d;
    	t32 >>= 28;
    	b[3] = t32;

    	// r[4*i+0] = (uint16_t)(a[0]  - b[0]) & Qmod_minus1;
    	t32 = a[0];
    	t32 -= b[0];
    	t16 = (16u) t32;
    	t16 &= (SABER_Q - 1);
    	r[4 * i] = t16;

    	// r[4*i+1] = (uint16_t)(a[1]  - b[1]) & Qmod_minus1;
    	t32 = a[1];
    	t32 -= b[1];
    	t16 = (16u) t32;
        t16 &= (SABER_Q - 1);
    	r[4 * i + 1] = t16;

    	// r[4*i+2] = (uint16_t)(a[2]  - b[2]) & Qmod_minus1;
    	t32 = a[2];
    	t32 -= b[2];
    	t16 = (16u) t32;
    	t16 &= (SABER_Q - 1);
    	r[4 * i + 2] = t16;

    	// r[4*i+3] = (uint16_t)(a[3]  - b[3]) & Qmod_minus1;
    	t32 = a[3];
    	t32 -= b[3];
    	t16 = (16u) t32;
    	t16 &= (SABER_Q - 1);
    	r[4 * i + 3] = t16;
	}

	return r;
}

#endif