/*** fips202_regular_sha3_512_64.jahh: File containing the Jasmin implementation of sha3_512 function from fips202.c, where inlen == 64 and with (regular) SABER parameters ***/

#ifndef SHA3_512_64_HH
#define SHA3_512_64_HH

#include "SABER_params.jahh"
#include "fips202_regular_KeccakF1600_StatePermute.jahh"

fn sha3_512_64(reg ptr u8[64] output, reg ptr u8[64] input) -> reg ptr u8[64]
{
	inline int i;

	reg u256[2] t256;
	reg u256[2] s256;

	stack u64[25] s;

	t256[0] = zero_u256;
	
	for i = 0 to 6 {
		s[u256 i] = t256[0];
	}
	s[24] = 0;

	t256[0] = input[u256 0];
	t256[1] = input[u256 1];

	s256[0] = s[u256 0];
	s256[1] = s[u256 1];

	s256[0] ^= t256[0];
	s256[1] ^= t256[1];
	
	s[u256 0] = s256[0];
	s[u256 1] = s256[1];
	
	s[u8 64] ^= 0x06;
	s[u8 SHA3_512_RATE - 1] ^= 0x80;
	
	// t, s = keccak_squeezeblocks_512_512(t, s);
	s = KeccakF1600_StatePermute(s);

	t256[0] = s[u256 0];
	t256[1] = s[u256 1];

	output[u256 0] = t256[0]; 
	output[u256 1] = t256[1];

	return output;
}

#endif