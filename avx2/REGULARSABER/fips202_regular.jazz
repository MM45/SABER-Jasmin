/*** fips202_regular.jazz: File containing the Jasmin wrappers of the functions in the fips202_regular_*.jahh files, only used for testing ***/

#include "SABER_params.jahh"
#include "fips202_regular_KeccakF1600_StatePermute.jahh"
#include "fips202_regular_keccak_absorb_128_32.jahh"
#include "fips202_regular_keccak_squeezeblocks_128_128.jahh"
#include "fips202_regular_shake128_32_32.jahh"
#include "fips202_regular_shake128_KK13N8_32.jahh"
#include "fips202_regular_shake128_MUNK8_32.jahh"
#include "fips202_regular_sha3_256_32.jahh"
#include "fips202_regular_sha3_256_64.jahh"
#include "fips202_regular_sha3_256_PUBKEYBYTES.jahh"
#include "fips202_regular_sha3_256_CCADEC.jahh"
#include "fips202_regular_sha3_512_64.jahh"


export fn KeccakF1600_StatePermute_jazz(reg u64 statep)
{
	inline int i;
	
	reg u64 t64;

	stack u64[25] state;
	
	stack u64 sstatep;

	for i = 0 to 25 {
		t64 = (u64) [statep + 8 * i];
		state[i] = t64;
	}

	sstatep = statep;

	state = KeccakF1600_StatePermute(state);

	statep = sstatep;

	for i = 0 to 25 {
		t64 = state[i];
		(u64) [statep + 8 * i] = t64;
	}
}


// INLEN: SABER_BYTES_CCA_DEC
export fn sha3_256_CCADEC_jazz(reg u64 outputp, reg u64 inputp) 
{
	inline int i;

	reg u256 t256;

	stack u8[32] output;
	stack u8[SABER_BYTES_CCA_DEC] input;

	stack u64 soutputp;

	for i = 0 to SABER_BYTES_CCA_DEC / 32 {
		t256 = (u256) [inputp + 32 * i];
		input[u256 i] = t256;
	}

	soutputp = outputp;

	output = sha3_256_CCADEC(output, input);

	outputp = soutputp;
	
	t256 = output[u256 0];
	(u256) [outputp] = t256;
}

// INLEN: SABER_INDCPA_PUBLICKEYBYTES
export fn sha3_256_PUBKEYBYTES_jazz(reg u64 outputp, reg u64 inputp) 
{
	inline int i;

	reg u256 t256;

	stack u8[32] output;
	stack u8[SABER_INDCPA_PUBLICKEYBYTES] input;

	stack u64 soutputp;

	for i = 0 to SABER_INDCPA_PUBLICKEYBYTES / 32 {
		t256 = (u256) [inputp + 32 * i];
		input[u256 i] = t256;
	}

	soutputp = outputp;

	output = sha3_256_PUBKEYBYTES(output, input);

	outputp = soutputp;
	
	t256 = output[u256 0];
	(u256) [outputp] = t256;
}

// INLEN: 64
export fn sha3_256_64_jazz(reg u64 outputp, reg u64 inputp) 
{
	inline int i;

	reg u256 t256;

	stack u8[32] output;
	stack u8[64] input;

	stack u64 soutputp;

	for i = 0 to 2 {
		t256 = (u256) [inputp + 32 * i];
		input[u256 i] = t256;
	}

	soutputp = outputp;

	output = sha3_256_64(output, input);

	outputp = soutputp;
	
	t256 = output[u256 0];
	(u256) [outputp] = t256;
}

// OUTLEN: KK13N8; INLEN: 32
export fn shake128_KK13N8_32_jazz(reg u64 outputp, reg u64 inputp) 
{
	inline int i;

	reg u256 t256;

	stack u8[KK13N8] output;
	stack u8[32] input;

	stack u64 soutputp;

	t256 = (u256) [inputp];
	input[u256 0] = t256;

	soutputp = outputp;

	output = shake128_KK13N8_32(output, input);

	outputp = soutputp;

	for i = 0 to KK13N8 / 32 {
		t256 = output[u256 i];
		(u256) [outputp + 32 * i] = t256;
	}
}

// OUTLEN: 32; INLEN: 32
export fn shake128_32_32_jazz(reg u64 outputp, reg u64 inputp) 
{
	reg u256 t256;

	stack u8[32] output;
	stack u8[32] input;

	stack u64 soutputp;

	t256 = (u256) [inputp];
	input[u256 0] = t256;

	soutputp = outputp;

	output = shake128_32_32(output, input);

	outputp = soutputp;

	t256 = output[u256 0];
	(u256) [outputp] = t256;
}

// RATE: SHAKE128; OUTLEN: SHAKE128
export fn keccak_squeezeblocks_128_128_jazz(reg u64 hp, reg u64 sp)
{
	inline int i;

	reg u8 t8;

	reg u64 t64;

	stack u8[SHAKE128_RATE] h;

	stack u64[25] s;

	stack u64 shp;
	stack u64 ssp;

	for i = 0 to 25 {
		t64 = (u64) [sp + 8 * i];
		s[i] = t64;
	}

	shp = hp;
	ssp = sp;

	h, s = keccak_squeezeblocks_128_128(h, s);

	hp = shp;
	sp = ssp;

	for i = 0 to SHAKE128_RATE {
		t8 = h[i];
		(u8) [hp + i] = t8;
	}

	for i = 0 to 25 {
		t64 = s[i];
		(u64) [sp + 8 * i] = t64;
	}
}

// OUTLEN: MUNK8; INLEN: 32
export fn shake128_MUNK8_32_jazz(reg u64 outputp, reg u64 inputp) 
{
	inline int i;

	reg u256 t256;

	stack u8[MUNK8] output;
	stack u8[32] input;

	stack u64 soutputp;

	t256 = (u256) [inputp];
	input[u256 0] = t256;

	soutputp = outputp;

	output = shake128_MUNK8_32(output, input);

	outputp = soutputp;

	for i = 0 to MUNK8 / 32 {
		t256 = output[u256 i];
		(u256) [outputp + 32 * i] = t256;
	}
}

// RATE: SHAKE128; MLEN: 32
export fn keccak_absorb_128_32_jazz(reg u64 sp, reg u64 mp) 
{
	inline int i;

	reg u64 t64;

	reg u256 t256;

	stack u8[32] m;

	stack u64[25] s;

	for i = 0 to 25 {
		t64 = (u64) [sp + 8 * i];
		s[i] = t64;
	}

	t256 = (u256) [mp];
	m[u256 0] = t256;

	s = keccak_absorb_128_32(s, m);

	for i = 0 to 25 {
		t64 = s[i];
		(u64) [sp + 8 * i] = t64;
	}
}

// INLEN: 32
export fn sha3_256_32_jazz(reg u64 outputp, reg u64 inputp) 
{
	inline int i;

	reg u256 t256;

	stack u8[32] output;
	stack u8[32] input;

	stack u64 soutputp;

	t256 = (u256) [inputp];
	input[u256 0] = t256;

	soutputp = outputp;

	output = sha3_256_32(output, input);

	outputp = soutputp;

	t256 = output[u256 0];
	(u256) [outputp] = t256;
}

export fn sha3_512_64_jazz(reg u64 outputp, reg u64 inputp)
{
	inline int i;

	reg u256 t256;

	stack u8[64] output;
	stack u8[64] input;

	stack u64 soutputp;

	for i = 0 to 2 {
		t256 = (u256) [inputp + 32 * i];
		input[u256 i] = t256;
	}

	soutputp = outputp;

	output = sha3_512_64(output, input);

	outputp = soutputp;
	
	for i = 0 to 2 {
		t256 = output[u256 i];
		(u256) [outputp + 32 * i] = t256;
	}	
}
