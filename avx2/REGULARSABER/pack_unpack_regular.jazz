/*** pack_unpack_regular.jazz: File containing the Jasmin wrappers of the functions in the pack_unpack_regular_*.jahh files, only used for testing ***/

#include "SABER_params.jahh"
#include "pack_unpack_regular_SABER_pack_4bit.jahh"
#include "pack_unpack_regular_SABER_un_pack4bit.jahh"
#include "pack_unpack_regular_POLVECp2BS.jahh"
#include "pack_unpack_regular_POLVECq2BS.jahh"
#include "pack_unpack_regular_BS2POLVECp.jahh"
#include "pack_unpack_regular_BS2POLVECq.jahh"

export fn SABER_pack_4bit_jazz(reg u64 bytesp, reg u64 datap)
{
	inline int i;

	reg u256 t256;

	stack u8[SABER_SCALEBYTES_KEM] bytes;
	stack u16[SABER_N] data;

	for i = 0 to SABER_N / 16 {
		t256 = (u256) [datap + 32 * i];
		data[u256 i] = t256;
	}

	bytes = SABER_pack_4bit(bytes, data);

	for i = 0 to SABER_SCALEBYTES_KEM / 32 {
		t256 = bytes[u256 i];
		(u256) [bytesp + 32 * i] = t256;
	}

}


export fn SABER_un_pack4bit_jazz(reg u64 bytesp, reg u64 datap)
{
	inline int i;

	reg u256 t256;

	stack u8[SABER_SCALEBYTES_KEM] bytes;
	stack u16[SABER_N] data;

	for i = 0 to SABER_SCALEBYTES_KEM / 32 {
		t256 = (u256) [bytesp + 32 * i];
		bytes[u256 i] = t256;
	}

	data = SABER_un_pack4bit(bytes, data);

	for i = 0 to SABER_N / 16 {
		t256 = data[u256 i];
		(u256) [datap + 32 * i] = t256;
	}

}

export fn POLVECp2BS_jazz(reg u64 bytesp, reg u64 datap)
{
	inline int i;

	reg u256 t256;

	stack u8[SABER_POLYVECCOMPRESSEDBYTES] bytes;
	stack u16[SABER_KN] data;

	for i = 0 to SABER_KN / 16 {
		t256 = (u256) [datap + 32 * i];
		data[u256 i] = t256;
	}

	bytes = POLVECp2BS(bytes, data);

	for i = 0 to SABER_POLYVECCOMPRESSEDBYTES / 32 {
		t256 = bytes[u256 i];
		(u256) [bytesp + 32 * i] = t256;
	}

}

export fn POLVECq2BS_jazz(reg u64 bytesp, reg u64 datap)
{
	inline int i;

	reg u256 t256;

	stack u8[SABER_POLYVECBYTES] bytes;
	stack u16[SABER_KN] data;

	for i = 0 to SABER_KN / 16 {
		t256 = (u256) [datap + 32 * i];
		data[u256 i] = t256;
	}

	bytes = POLVECq2BS(bytes, data);

	for i = 0 to SABER_POLYVECBYTES / 32 {
		t256 = bytes[u256 i];
		(u256) [bytesp + 32 * i] = t256;
	}
}

export fn BS2POLVECp_jazz(reg u64 bytesp, reg u64 datap)
{
	inline int i;

	reg u256 t256;

	stack u8[SABER_POLYVECCOMPRESSEDBYTES] bytes;
	stack u16[SABER_KN] data;

	
	for i = 0 to SABER_POLYVECCOMPRESSEDBYTES / 32 {
		t256 = (u256) [bytesp + 32 * i];
		bytes[u256 i] = t256;
	}

	data = BS2POLVECp(bytes, data);

	for i = 0 to SABER_KN / 16 {
		t256 = data[u256 i];
		(u256) [datap + 32 * i] = t256;
	}
}

export fn BS2POLVECq_jazz(reg u64 bytesp, reg u64 datap)
{
	inline int i;

	reg u256 t256;

	stack u8[SABER_POLYVECBYTES] bytes;
	stack u16[SABER_KN] data;

	for i = 0 to SABER_POLYVECBYTES / 32 {
		t256 = (u256) [bytesp + 32 * i];
		bytes[u256 i] = t256;
	}

	data = BS2POLVECq(bytes, data);

	for i = 0 to SABER_KN / 16 {
		t256 = data[u256 i];
		(u256) [datap + 32 * i] = t256;
	}
}
