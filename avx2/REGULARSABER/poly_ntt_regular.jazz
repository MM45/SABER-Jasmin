/*** poly_ntt_regular.jazz: File containing the Jasmin wrappers of the functions in the poly_ntt_regular*.jahh files, only used for unit testing ***/

#include "SABER_params.jahh"
#include "poly_ntt_regular_poly_crt.jahh"
#include "poly_ntt_regular_poly_ntt.jahh"
#include "poly_ntt_regular_poly_invntt_tomont.jahh"

export fn poly_crt_jazz(reg u64 rp, reg u64 ap, reg u64 bp)
{
	inline int i;

	reg u256 t256;

	stack u16[SABER_N] a;
	stack u16[SABER_N] b;
	stack u16[SABER_N] r;

	for i = 0 to SABER_N / 16 {
		t256 = (u256) [ap + 32 * i];
		a[u256 i] = t256;
	}

	for i = 0 to SABER_N / 16 {
		t256 = (u256) [bp + 32 * i];
		b[u256 i] = t256;
	}

	r = poly_crt(r, a, b);

	for i = 0 to SABER_N / 16 {
		t256 = r[u256 i];
		(u256) [rp + 32 * i] = t256;
	}
}


// pdata == PDATA0
export fn poly_ntt_0_jazz(reg u64 rp, reg u64 ap)
{
	inline int i;

	reg u256 t256;

	stack u16[SABER_N] a;
	stack u16[SABER_N] r;

	for i = 0 to SABER_N / 16 {
		t256 = (u256) [ap + 32 * i];
		a[u256 i] = t256;
	}

	r = poly_ntt_0(r, a);

	for i = 0 to SABER_N / 16 {
		t256 = r[u256 i];
		(u256) [rp + 32 * i] = t256;
	}
}

// pdata == PDATA1
export fn poly_ntt_1_jazz(reg u64 rp, reg u64 ap)
{
	inline int i;

	reg u256 t256;

	stack u16[SABER_N] a;
	stack u16[SABER_N] r;

	for i = 0 to SABER_N / 16 {
		t256 = (u256) [ap + 32 * i];
		a[u256 i] = t256;
	}

	r = poly_ntt_1(r, a);

	for i = 0 to SABER_N / 16 {
		t256 = r[u256 i];
		(u256) [rp + 32 * i] = t256;
	}
}


// pdata == PDATA0
export fn poly_invntt_tomont_0_jazz(reg u64 rp, reg u64 ap)
{
	inline int i;

	reg u256 t256;

	stack u16[SABER_N] a;
	stack u16[SABER_N] r;

	for i = 0 to SABER_N / 16 {
		t256 = (u256) [ap + 32 * i];
		a[u256 i] = t256;
	}

	r = poly_invntt_tomont_0(r, a);

	for i = 0 to SABER_N / 16 {
		t256 = r[u256 i];
		(u256) [rp + 32 * i] = t256;
	}
}

// pdata == PDATA1
export fn poly_invntt_tomont_1_jazz(reg u64 rp, reg u64 ap)
{
	inline int i;

	reg u256 t256;

	stack u16[SABER_N] a;
	stack u16[SABER_N] r;

	for i = 0 to SABER_N / 16 {
		t256 = (u256) [ap + 32 * i];
		a[u256 i] = t256;
	}

	r = poly_invntt_tomont_1(r, a);

	for i = 0 to SABER_N / 16 {
		t256 = r[u256 i];
		(u256) [rp + 32 * i] = t256;
	}
}
