/*** pack_unpack_fire_SABER_pack_6bit.jahh: File containing the Jasmin implementation of the SABER_pack_6bit function from pack_unpack.c, with FIRESABER parameters ***/

#ifndef SABER_PACK_6BIT_HH
#define SABER_PACK_6BIT_HH

#include "SABER_params.jahh"

inline fn SABER_pack_6bit(stack u8[SABER_SCALEBYTES_KEM] bytes, stack u16[SABER_N] data) -> stack u8[SABER_SCALEBYTES_KEM]
{
	inline int j;

	reg u8 br;

	reg u16 d1;
	reg u16 d2;

	for j = 0 to (SABER_N / 4) {
		// bytes[offset_byte + 0]= (data[offset_data + 0]&0x3f) | ((data[offset_data+1]&0x03)<<6);
		d1 = data[4 * j];
		d1 &= 0x3f;
		d2 = data[4 * j + 1];
		d2 &= 0x03;
		d2 <<= 6;
		d1 |= d2;
		br = (8u) d1;
		bytes[3 * j] = br;

		// bytes[offset_byte + 1]= ((data[offset_data+1]>>2)&0x0f) | ((data[offset_data+2]&0x0f)<<4);
		d1 = data[4 * j + 1];
		d1 >>= 2;
		d1 &= 0x0f;
		d2 = data[4 * j + 2];
		d2 &= 0x0f;
		d2 <<= 4;
		d1 |= d2;
		br = (8u) d1;
		bytes[3 * j + 1] = br;

		// bytes[offset_byte + 2]= ((data[offset_data+2]>>4)&0x03) | ((data[offset_data+3]&0x3f)<<2);
		d1 = data[4 * j + 2];
		d1 >>= 4;
		d1 &= 0x03;
		d2 = data[4 * j + 3];
		d2 &= 0x3f;
		d2 <<= 2;
		d1 |= d2;
		br = (8u) d1;
		bytes[3 * j + 2] = br;
	}

	return bytes;
}

#endif
