/*** fips202_regular_keccak_absorb_256_PUBKEYBYTES.jahh: File containing the Jasmin implementation of keccak_absorb function from fips202.c, where rate == SHA3256RATE, mlen == SABER_INDCPA_PUBLICKEYBYTES and with (regular) SABER parameters ***/

#ifndef KECCAK_ABSORB_256_PUBKEYBYTES_HH
#define KECCAK_ABSORB_256_PUBKEYBYTES_HH

#include "SABER_params.jahh"
#include "fips202_regular_KeccakF1600_StatePermute.jahh"
#include "fips202_regular_load64.jahh"

inline fn keccak_absorb_256_PUBKEYBYTES(reg ptr u64[25] s, reg ptr u8[SABER_INDCPA_PUBLICKEYBYTES] m) -> reg ptr u64[25]
{
	inline int i;
	inline int j;
	inline int iterations;
	inline int handled;
	inline int remainder;

	reg u8 t8;

	reg u64 t64;

	stack u8[200] t;

	iterations = SABER_INDCPA_PUBLICKEYBYTES / SHA3_256_RATE;
	handled = iterations * SHA3_256_RATE;
	remainder = SABER_INDCPA_PUBLICKEYBYTES - handled;

	for j = 0 to iterations {
		for i = 0 to (SHA3_256_RATE / 8) {
			t64 = load64(m[j * SHA3_256_RATE + 8 * i:8]);
			s[i] ^= t64;
		}

		s = KeccakF1600_StatePermute(s);
	}

	for i = 0 to SHA3_256_RATE {
		t[i] = 0;
	}

	for i = 0 to remainder {
		t8 = m[handled + i];
		t[i] = t8;
	}

	t[remainder] = 0x06;
	t[SHA3_256_RATE - 1] |= 128;

	for i = 0 to (SHA3_256_RATE / 8) {
		t64 = load64(t[8 * i:8]);
		s[i] ^= t64;
	}

	return s;
}

#endif